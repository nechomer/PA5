str_err_null_ptr_ref:		"Runtime Error: Null pointer dereference!"
str_err_arr_out_of_bounds:	"Runtime Error: Array index out of bounds!"
str_err_neg_arr_size:	"Runtime Error: Array allocation with negative array size!"
str_err_div_by_zero:	"Runtime Error: Division by zero!"
str1:	"mom"
str2:	"momy"
str3:	"mrere"

# class NullObj
# Dispatch vector:
_DV_NullObj: []
# Field offsets

# class A
# Dispatch vector:
_DV_A: [_A_foo]
# Field offsets
# 1: a


# Check Null Ptr Reference:
# static void checkNullRef(array a){
# 	if(a == null) {Library.println(...);
# 	Library.exit(1);
# 	}
# }
__checkNullRef:
	Move a, R0
	Compare 0, R0
	JumpTrue _error1
	Return Rdummy
_error1:
	Library __println(str_err_null_ptr_ref),Rdummy
	Library __exit(1),Rdummy

# Check Array Index Out Of Bounds:
# static void checkArrayAccess(array a, index i) {
# 	if (i<0 || i>=a.length) {
# 	Library.println("Runtime Error");
# 	}
# }
__checkArrayAccess:
	Move i, R0
	Compare 0, R0
	JumpL _error2
	ArrayLength a, R0
	Compare i, R0
	JumpLE _error2	Return Rdummy
_error2:
	Library __println(str_err_arr_out_of_bounds),Rdummy
	Library __exit(1),Rdummy

# Check Array Allocation Is Not With Negative Number:
# static void checkSize(size n) {
# 	if (n<0) Library.println("Runtime Error");
# }
__checkSize:
	Move n, R0
	Compare 0, R0
	JumpLE _error3
	Return Rdummy
_error3:
	Library __println(str_err_neg_arr_size),Rdummy
	Library __exit(1),Rdummy

# Check Division By Zero:
# static void checkZero(value b) {
# 	if (b == 0) Library.println("Runtime Error");
# }
__checkZero:
	Move b, R0
	Compare 0, R0	JumpTrue _error4
	Return Rdummy
_error4:
	Library __println(str_err_div_by_zero),Rdummy
	Library __exit(1),Rdummy


_ic_main:
Move 0, R0
Move R0, a
Library __allocateObject(8), R0
MoveField _DV_A, R0.0
Move R0, b
Move str1, R0
Move R0, s1
Move str2, R0
Move R0, s2
Move str3, R0
Move R0, s3
Move b, R1
StaticCall __checkNullRef(a=R1),Rdummy
Library __allocateObject(8), R2
MoveField _DV_A, R2.0
VirtualCall R1.0(aa=R2), Rdummy
Library __exit(0),Rdummy

_A_foo:
Move 10, R1
StaticCall __checkSize(n=R1),Rdummy
Mul 4, R1
Library __allocateArray(R1), R0
Move R0, aa
Move 3, R0
Move aa, R1
StaticCall __checkNullRef(a=R1),Rdummy
Move 0, R2
StaticCall __checkArrayAccess(a=R1, i=R2),Rdummy
MoveArray R0, R1[R2]
Move 3, R0
Move this, R1
MoveField R0, R1.1
Return Rdummy
