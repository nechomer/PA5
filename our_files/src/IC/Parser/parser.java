
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

package IC.Parser;

import IC.*;
import IC.Parser.*;
import IC.AST.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\003\000\002\002\004\000\002\002" +
    "\002\000\002\004\003\000\002\004\004\000\002\003\010" +
    "\000\002\005\004\000\002\005\002\000\002\006\005\000" +
    "\002\006\004\000\002\006\002\000\002\007\003\000\002" +
    "\007\003\000\002\010\004\000\002\011\005\000\002\011" +
    "\002\000\002\012\004\000\002\013\012\000\002\013\013" +
    "\000\002\013\012\000\002\013\013\000\002\014\011\000" +
    "\002\014\012\000\002\014\011\000\002\014\012\000\002" +
    "\015\004\000\002\015\002\000\002\016\004\000\002\016" +
    "\003\000\002\016\004\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\004\000\002\016\004\000" +
    "\002\016\003\000\002\016\005\000\002\016\007\000\002" +
    "\020\005\000\002\021\004\000\002\022\003\000\002\022" +
    "\004\000\002\023\007\000\002\024\011\000\002\025\007" +
    "\000\002\026\003\000\002\027\003\000\002\017\005\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\006\000\002\042\007\000\002\042\005\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\005" +
    "\000\002\045\003\000\002\045\003\000\002\043\003\000" +
    "\002\043\005\000\002\037\003\000\002\037\005\000\002" +
    "\040\004\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\005\000\002\030\005" +
    "\000\002\031\003\000\002\031\003\000\002\034\005\000" +
    "\002\035\003\000\002\035\004\000\002\032\005\000\002" +
    "\033\005\000\002\036\004\000\002\044\003\000\002\044" +
    "\004\000\002\044\006\000\002\046\005\000\002\046\005" +
    "\000\002\046\005\000\002\046\005\000\002\046\005\000" +
    "\002\046\005\000\002\046\005\000\002\046\005\000\002" +
    "\046\005\000\002\046\005\000\002\046\005\000\002\046" +
    "\005\000\002\046\005\000\002\047\004\000\002\047\004" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\006\002\uffff\004\006\001\002\000\004\002" +
    "\322\001\002\000\006\002\001\004\006\001\002\000\004" +
    "\056\010\001\002\000\006\002\ufffe\004\ufffe\001\002\000" +
    "\006\005\012\051\ufffa\001\002\000\004\051\014\001\002" +
    "\000\004\056\013\001\002\000\004\051\ufffb\001\002\000" +
    "\020\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\052\ufff7" +
    "\056\ufff7\001\002\000\020\006\021\007\024\010\017\011" +
    "\023\012\026\052\032\056\025\001\002\000\020\006\ufff8" +
    "\007\ufff8\010\ufff8\011\ufff8\012\ufff8\052\ufff8\056\ufff8\001" +
    "\002\000\006\024\uffc0\055\uffc0\001\002\000\020\006\ufff6" +
    "\007\ufff6\010\ufff6\011\ufff6\012\ufff6\052\ufff6\056\ufff6\001" +
    "\002\000\014\007\272\010\017\011\023\012\026\056\025" +
    "\001\002\000\020\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012" +
    "\ufff5\052\ufff5\056\ufff5\001\002\000\006\024\uffbf\055\uffbf" +
    "\001\002\000\004\055\256\001\002\000\006\024\uffbd\055" +
    "\uffbd\001\002\000\006\024\uffbe\055\uffbe\001\002\000\006" +
    "\024\041\055\040\001\002\000\006\053\ufff2\054\034\001" +
    "\002\000\004\053\033\001\002\000\006\002\ufffc\004\ufffc" +
    "\001\002\000\020\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012" +
    "\ufff9\052\ufff9\056\ufff9\001\002\000\004\055\036\001\002" +
    "\000\004\053\ufff4\001\002\000\006\053\ufff2\054\034\001" +
    "\002\000\004\053\ufff3\001\002\000\010\026\043\053\ufff1" +
    "\054\ufff1\001\002\000\004\025\042\001\002\000\006\024" +
    "\uffbc\055\uffbc\001\002\000\014\010\017\011\023\012\026" +
    "\027\045\056\025\001\002\000\006\027\251\054\250\001" +
    "\002\000\004\051\051\001\002\000\006\024\041\055\050" +
    "\001\002\000\006\027\uffc3\054\uffc3\001\002\000\006\027" +
    "\uffc1\054\uffc1\001\002\000\056\010\uffe7\011\uffe7\012\uffe7" +
    "\013\uffe7\014\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022" +
    "\uffe7\026\uffe7\031\uffe7\032\uffe7\051\uffe7\052\uffe7\055\uffe7" +
    "\056\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\001" +
    "\002\000\056\010\017\011\023\012\026\013\076\014\074" +
    "\016\112\017\102\020\060\021\075\022\077\026\057\031" +
    "\064\032\066\051\110\052\114\055\122\056\113\057\121" +
    "\060\063\061\053\062\054\063\073\001\002\000\050\024" +
    "\uff9d\025\uff9d\027\uff9d\030\uff9d\031\uff9d\034\uff9d\035\uff9d" +
    "\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\044" +
    "\uff9d\045\uff9d\046\uff9d\047\uff9d\053\uff9d\054\uff9d\001\002" +
    "\000\050\024\uffa0\025\uffa0\027\uffa0\030\uffa0\031\uffa0\034" +
    "\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0" +
    "\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\053\uffa0\054" +
    "\uffa0\001\002\000\004\053\247\001\002\000\050\024\uffc7" +
    "\025\uffc7\027\uffc7\030\uffc7\031\uffc7\034\uffc7\035\uffc7\036" +
    "\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7" +
    "\045\uffc7\046\uffc7\047\uffc7\053\uffc7\054\uffc7\001\002\000" +
    "\032\021\075\022\077\026\057\031\064\032\066\055\122" +
    "\056\132\057\121\060\063\061\053\062\054\063\073\001" +
    "\002\000\004\053\uffd3\001\002\000\050\024\uffc9\025\uffc9" +
    "\027\uffc9\030\uffc9\031\uffc9\034\uffc9\035\uffc9\036\uffc9\037" +
    "\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9" +
    "\046\uffc9\047\uffc9\053\uffc9\054\uffc9\001\002\000\050\024" +
    "\uffb7\025\uffb7\027\uffb7\030\uffb7\031\uffb7\034\uffb7\035\uffb7" +
    "\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044" +
    "\uffb7\045\uffb7\046\uffb7\047\uffb7\053\uffb7\054\uffb7\001\002" +
    "\000\050\024\uff9e\025\uff9e\027\uff9e\030\uff9e\031\uff9e\034" +
    "\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e" +
    "\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\053\uff9e\054" +
    "\uff9e\001\002\000\032\021\075\022\077\026\057\031\064" +
    "\032\066\055\122\056\132\057\121\060\063\061\053\062" +
    "\054\063\073\001\002\000\004\053\243\001\002\000\032" +
    "\021\075\022\077\026\057\031\064\032\066\055\122\056" +
    "\132\057\121\060\063\061\053\062\054\063\073\001\002" +
    "\000\042\024\uffd1\030\uffd1\031\uffd1\034\uffd1\035\uffd1\036" +
    "\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1" +
    "\045\uffd1\046\uffd1\047\uffd1\050\240\001\002\000\050\024" +
    "\uffca\025\uffca\027\uffca\030\uffca\031\uffca\034\uffca\035\uffca" +
    "\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044" +
    "\uffca\045\uffca\046\uffca\047\uffca\053\uffca\054\uffca\001\002" +
    "\000\060\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015" +
    "\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\026\uffde" +
    "\031\uffde\032\uffde\051\uffde\052\uffde\055\uffde\056\uffde\057" +
    "\uffde\060\uffde\061\uffde\062\uffde\063\uffde\001\002\000\004" +
    "\053\237\001\002\000\050\024\uff9c\025\uff9c\027\uff9c\030" +
    "\uff9c\031\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c" +
    "\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\047" +
    "\uff9c\053\uff9c\054\uff9c\001\002\000\004\026\231\001\002" +
    "\000\050\024\uffcf\025\uffcf\027\uffcf\030\uffcf\031\uffcf\034" +
    "\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf" +
    "\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\053\uffcf\054" +
    "\uffcf\001\002\000\034\021\075\022\077\026\057\031\064" +
    "\032\066\053\uffd9\055\122\056\132\057\121\060\063\061" +
    "\053\062\054\063\073\001\002\000\012\010\017\011\023" +
    "\012\026\056\222\001\002\000\050\024\uffcb\025\uffcb\027" +
    "\uffcb\030\uffcb\031\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb" +
    "\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046" +
    "\uffcb\047\uffcb\053\uffcb\054\uffcb\001\002\000\042\024\uffd0" +
    "\030\uffd0\031\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040" +
    "\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0" +
    "\047\uffd0\053\220\001\002\000\004\053\uffd4\001\002\000" +
    "\060\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\026\uffe1\031" +
    "\uffe1\032\uffe1\051\uffe1\052\uffe1\055\uffe1\056\uffe1\057\uffe1" +
    "\060\uffe1\061\uffe1\062\uffe1\063\uffe1\001\002\000\004\053" +
    "\217\001\002\000\050\024\uffc6\025\uffc6\027\uffc6\030\uffc6" +
    "\031\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041" +
    "\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6" +
    "\053\uffc6\054\uffc6\001\002\000\050\024\uffb9\025\uffb9\027" +
    "\uffb9\030\uffb9\031\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9" +
    "\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046" +
    "\uffb9\047\uffb9\053\uffb9\054\uffb9\001\002\000\060\010\uffe2" +
    "\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017" +
    "\uffe2\020\uffe2\021\uffe2\022\uffe2\026\uffe2\031\uffe2\032\uffe2" +
    "\051\uffe2\052\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061" +
    "\uffe2\062\uffe2\063\uffe2\001\002\000\056\010\uffe7\011\uffe7" +
    "\012\uffe7\013\uffe7\014\uffe7\016\uffe7\017\uffe7\020\uffe7\021" +
    "\uffe7\022\uffe7\026\uffe7\031\uffe7\032\uffe7\051\uffe7\052\uffe7" +
    "\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\063" +
    "\uffe7\001\002\000\060\010\uffe5\011\uffe5\012\uffe5\013\uffe5" +
    "\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022" +
    "\uffe5\026\uffe5\031\uffe5\032\uffe5\051\uffe5\052\uffe5\055\uffe5" +
    "\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\001" +
    "\002\000\004\026\211\001\002\000\010\024\uffbd\030\133" +
    "\055\uffbd\001\002\000\020\006\uffec\007\uffec\010\uffec\011" +
    "\uffec\012\uffec\052\uffec\056\uffec\001\002\000\040\024\163" +
    "\030\157\031\146\034\152\035\160\036\154\037\155\040" +
    "\162\041\164\042\156\043\151\044\150\045\153\046\147" +
    "\047\165\001\002\000\060\010\uffe3\011\uffe3\012\uffe3\013" +
    "\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\026\uffe3\031\uffe3\032\uffe3\051\uffe3\052\uffe3\055" +
    "\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3" +
    "\001\002\000\056\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014" +
    "\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\026\uffe8" +
    "\031\uffe8\032\uffe8\051\uffe8\052\uffe8\055\uffe8\056\uffe8\057" +
    "\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\001\002\000\050" +
    "\024\uffba\025\uffba\027\uffba\030\uffba\031\uffba\034\uffba\035" +
    "\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba" +
    "\044\uffba\045\uffba\046\uffba\047\uffba\053\uffba\054\uffba\001" +
    "\002\000\050\024\uff9f\025\uff9f\027\uff9f\030\uff9f\031\uff9f" +
    "\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042" +
    "\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\053\uff9f" +
    "\054\uff9f\001\002\000\054\024\uffb2\025\uffb2\026\137\027" +
    "\uffb2\030\uffb2\031\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2" +
    "\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046" +
    "\uffb2\047\uffb2\050\uffb2\053\uffb2\054\uffb2\001\002\000\006" +
    "\024\041\055\124\001\002\000\006\050\125\053\126\001" +
    "\002\000\032\021\075\022\077\026\057\031\064\032\066" +
    "\055\122\056\132\057\121\060\063\061\053\062\054\063" +
    "\073\001\002\000\060\010\uffdd\011\uffdd\012\uffdd\013\uffdd" +
    "\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022" +
    "\uffdd\026\uffdd\031\uffdd\032\uffdd\051\uffdd\052\uffdd\055\uffdd" +
    "\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\063\uffdd\001" +
    "\002\000\050\024\uffd1\025\uffd1\027\uffd1\030\uffd1\031\uffd1" +
    "\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042" +
    "\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\053\uffd1" +
    "\054\uffd1\001\002\000\050\024\uffd0\025\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0" +
    "\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047" +
    "\uffd0\053\uffd0\054\uffd0\001\002\000\042\024\163\030\157" +
    "\031\146\034\152\035\160\036\154\037\155\040\162\041" +
    "\164\042\156\043\151\044\150\045\153\046\147\047\165" +
    "\053\210\001\002\000\004\030\133\001\002\000\004\055" +
    "\135\001\002\000\050\024\uffbb\025\uffbb\027\uffbb\030\uffbb" +
    "\031\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041" +
    "\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb" +
    "\053\uffbb\054\uffbb\001\002\000\004\026\137\001\002\000" +
    "\050\024\uffb6\025\uffb6\027\uffb6\030\uffb6\031\uffb6\034\uffb6" +
    "\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043" +
    "\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\053\uffb6\054\uffb6" +
    "\001\002\000\034\021\075\022\077\026\057\027\141\031" +
    "\064\032\066\055\122\056\132\057\121\060\063\061\053" +
    "\062\054\063\073\001\002\000\044\024\163\027\uffc5\030" +
    "\157\031\146\034\152\035\160\036\154\037\155\040\162" +
    "\041\164\042\156\043\151\044\150\045\153\046\147\047" +
    "\165\054\uffc5\001\002\000\050\024\uffb5\025\uffb5\027\uffb5" +
    "\030\uffb5\031\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040" +
    "\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5" +
    "\047\uffb5\053\uffb5\054\uffb5\001\002\000\006\027\144\054" +
    "\143\001\002\000\032\021\075\022\077\026\057\031\064" +
    "\032\066\055\122\056\132\057\121\060\063\061\053\062" +
    "\054\063\073\001\002\000\050\024\uffb4\025\uffb4\027\uffb4" +
    "\030\uffb4\031\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040" +
    "\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4" +
    "\047\uffb4\053\uffb4\054\uffb4\001\002\000\044\024\163\027" +
    "\uffc4\030\157\031\146\034\152\035\160\036\154\037\155" +
    "\040\162\041\164\042\156\043\151\044\150\045\153\046" +
    "\147\047\165\054\uffc4\001\002\000\032\021\075\022\077" +
    "\026\057\031\064\032\066\055\122\056\132\057\121\060" +
    "\063\061\053\062\054\063\073\001\002\000\032\021\075" +
    "\022\077\026\057\031\064\032\066\055\122\056\132\057" +
    "\121\060\063\061\053\062\054\063\073\001\002\000\032" +
    "\021\075\022\077\026\057\031\064\032\066\055\122\056" +
    "\132\057\121\060\063\061\053\062\054\063\073\001\002" +
    "\000\032\021\075\022\077\026\057\031\064\032\066\055" +
    "\122\056\132\057\121\060\063\061\053\062\054\063\073" +
    "\001\002\000\032\021\075\022\077\026\057\031\064\032" +
    "\066\055\122\056\132\057\121\060\063\061\053\062\054" +
    "\063\073\001\002\000\032\021\075\022\077\026\057\031" +
    "\064\032\066\055\122\056\132\057\121\060\063\061\053" +
    "\062\054\063\073\001\002\000\032\021\075\022\077\026" +
    "\057\031\064\032\066\055\122\056\132\057\121\060\063" +
    "\061\053\062\054\063\073\001\002\000\032\021\075\022" +
    "\077\026\057\031\064\032\066\055\122\056\132\057\121" +
    "\060\063\061\053\062\054\063\073\001\002\000\032\021" +
    "\075\022\077\026\057\031\064\032\066\055\122\056\132" +
    "\057\121\060\063\061\053\062\054\063\073\001\002\000" +
    "\006\023\175\055\176\001\002\000\032\021\075\022\077" +
    "\026\057\031\064\032\066\055\122\056\132\057\121\060" +
    "\063\061\053\062\054\063\073\001\002\000\052\024\uffb1" +
    "\025\uffb1\027\uffb1\030\uffb1\031\uffb1\034\uffb1\035\uffb1\036" +
    "\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1" +
    "\045\uffb1\046\uffb1\047\uffb1\050\uffb1\053\uffb1\054\uffb1\001" +
    "\002\000\032\021\075\022\077\026\057\031\064\032\066" +
    "\055\122\056\132\057\121\060\063\061\053\062\054\063" +
    "\073\001\002\000\032\021\075\022\077\026\057\031\064" +
    "\032\066\055\122\056\132\057\121\060\063\061\053\062" +
    "\054\063\073\001\002\000\032\021\075\022\077\026\057" +
    "\031\064\032\066\055\122\056\132\057\121\060\063\061" +
    "\053\062\054\063\073\001\002\000\032\021\075\022\077" +
    "\026\057\031\064\032\066\055\122\056\132\057\121\060" +
    "\063\061\053\062\054\063\073\001\002\000\050\024\163" +
    "\025\uffa9\027\uffa9\030\157\031\146\034\152\035\160\036" +
    "\154\037\155\040\162\041\164\042\156\043\151\044\150" +
    "\045\153\046\147\047\uffa9\053\uffa9\054\uffa9\001\002\000" +
    "\050\024\163\025\uffa7\027\uffa7\030\157\031\146\034\152" +
    "\035\160\036\154\037\155\040\uffa7\041\uffa7\042\uffa7\043" +
    "\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\053\uffa7\054\uffa7" +
    "\001\002\000\042\024\163\025\171\030\157\031\146\034" +
    "\152\035\160\036\154\037\155\040\162\041\164\042\156" +
    "\043\151\044\150\045\153\046\147\047\165\001\002\000" +
    "\052\024\uffb0\025\uffb0\027\uffb0\030\uffb0\031\uffb0\034\uffb0" +
    "\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043" +
    "\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\053\uffb0" +
    "\054\uffb0\001\002\000\050\024\163\025\uffa8\027\uffa8\030" +
    "\157\031\146\034\152\035\160\036\154\037\155\040\uffa8" +
    "\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047" +
    "\uffa8\053\uffa8\054\uffa8\001\002\000\050\024\163\025\uffac" +
    "\027\uffac\030\157\031\uffac\034\uffac\035\uffac\036\uffac\037" +
    "\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac" +
    "\046\uffac\047\uffac\053\uffac\054\uffac\001\002\000\050\024" +
    "\uffb8\025\uffb8\027\uffb8\030\uffb8\031\uffb8\034\uffb8\035\uffb8" +
    "\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044" +
    "\uffb8\045\uffb8\046\uffb8\047\uffb8\053\uffb8\054\uffb8\001\002" +
    "\000\050\024\uffcc\025\uffcc\027\uffcc\030\uffcc\031\uffcc\034" +
    "\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc" +
    "\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\053\uffcc\054" +
    "\uffcc\001\002\000\054\024\uffb3\025\uffb3\026\137\027\uffb3" +
    "\030\uffb3\031\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040" +
    "\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3" +
    "\047\uffb3\050\uffb3\053\uffb3\054\uffb3\001\002\000\050\024" +
    "\163\025\uffa6\027\uffa6\030\157\031\146\034\152\035\160" +
    "\036\154\037\155\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044" +
    "\uffa6\045\uffa6\046\uffa6\047\uffa6\053\uffa6\054\uffa6\001\002" +
    "\000\050\024\163\025\uffaf\027\uffaf\030\157\031\uffaf\034" +
    "\152\035\160\036\154\037\uffaf\040\uffaf\041\uffaf\042\uffaf" +
    "\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\053\uffaf\054" +
    "\uffaf\001\002\000\050\024\163\025\uffab\027\uffab\030\157" +
    "\031\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041" +
    "\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab" +
    "\053\uffab\054\uffab\001\002\000\050\024\163\025\uffa3\027" +
    "\uffa3\030\157\031\146\034\152\035\160\036\154\037\155" +
    "\040\162\041\164\042\156\043\151\044\uffa3\045\uffa3\046" +
    "\uffa3\047\uffa3\053\uffa3\054\uffa3\001\002\000\050\024\163" +
    "\025\uffad\027\uffad\030\157\031\uffad\034\uffad\035\uffad\036" +
    "\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad" +
    "\045\uffad\046\uffad\047\uffad\053\uffad\054\uffad\001\002\000" +
    "\050\024\163\025\uffa5\027\uffa5\030\157\031\146\034\152" +
    "\035\160\036\154\037\155\040\uffa5\041\uffa5\042\uffa5\043" +
    "\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\053\uffa5\054\uffa5" +
    "\001\002\000\050\024\163\025\uffa4\027\uffa4\030\157\031" +
    "\146\034\152\035\160\036\154\037\155\040\162\041\164" +
    "\042\156\043\151\044\uffa4\045\uffa4\046\uffa4\047\uffa4\053" +
    "\uffa4\054\uffa4\001\002\000\050\024\163\025\uffaa\027\uffaa" +
    "\030\157\031\146\034\152\035\160\036\154\037\155\040" +
    "\162\041\164\042\156\043\151\044\150\045\153\046\uffaa" +
    "\047\uffaa\053\uffaa\054\uffaa\001\002\000\050\024\163\025" +
    "\uffae\027\uffae\030\157\031\uffae\034\152\035\160\036\154" +
    "\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045" +
    "\uffae\046\uffae\047\uffae\053\uffae\054\uffae\001\002\000\060" +
    "\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016" +
    "\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\026\uffdc\031\uffdc" +
    "\032\uffdc\051\uffdc\052\uffdc\055\uffdc\056\uffdc\057\uffdc\060" +
    "\uffdc\061\uffdc\062\uffdc\063\uffdc\001\002\000\032\021\075" +
    "\022\077\026\057\031\064\032\066\055\122\056\132\057" +
    "\121\060\063\061\053\062\054\063\073\001\002\000\042" +
    "\024\163\027\213\030\157\031\146\034\152\035\160\036" +
    "\154\037\155\040\162\041\164\042\156\043\151\044\150" +
    "\045\153\046\147\047\165\001\002\000\054\010\017\011" +
    "\023\012\026\013\076\014\074\016\112\017\102\020\060" +
    "\021\075\022\077\026\057\031\064\032\066\051\110\055" +
    "\122\056\113\057\121\060\063\061\053\062\054\063\073" +
    "\001\002\000\060\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014" +
    "\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5" +
    "\026\uffd5\031\uffd5\032\uffd5\051\uffd5\052\uffd5\055\uffd5\056" +
    "\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5\001\002" +
    "\000\056\010\017\011\023\012\026\013\076\014\074\016" +
    "\112\017\102\020\060\021\075\022\077\026\057\031\064" +
    "\032\066\051\110\052\216\055\122\056\113\057\121\060" +
    "\063\061\053\062\054\063\073\001\002\000\060\010\uffd2" +
    "\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017" +
    "\uffd2\020\uffd2\021\uffd2\022\uffd2\026\uffd2\031\uffd2\032\uffd2" +
    "\051\uffd2\052\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061" +
    "\uffd2\062\uffd2\063\uffd2\001\002\000\060\010\uffe6\011\uffe6" +
    "\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020" +
    "\uffe6\021\uffe6\022\uffe6\026\uffe6\031\uffe6\032\uffe6\051\uffe6" +
    "\052\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062" +
    "\uffe6\063\uffe6\001\002\000\060\010\uffda\011\uffda\012\uffda" +
    "\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021" +
    "\uffda\022\uffda\026\uffda\031\uffda\032\uffda\051\uffda\052\uffda" +
    "\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda\062\uffda\063" +
    "\uffda\001\002\000\004\024\225\001\002\000\006\024\uffbd" +
    "\026\223\001\002\000\004\027\224\001\002\000\050\024" +
    "\uffce\025\uffce\027\uffce\030\uffce\031\uffce\034\uffce\035\uffce" +
    "\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044" +
    "\uffce\045\uffce\046\uffce\047\uffce\053\uffce\054\uffce\001\002" +
    "\000\034\021\075\022\077\025\042\026\057\031\064\032" +
    "\066\055\122\056\132\057\121\060\063\061\053\062\054" +
    "\063\073\001\002\000\042\024\163\025\227\030\157\031" +
    "\146\034\152\035\160\036\154\037\155\040\162\041\164" +
    "\042\156\043\151\044\150\045\153\046\147\047\165\001" +
    "\002\000\050\024\uffcd\025\uffcd\027\uffcd\030\uffcd\031\uffcd" +
    "\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042" +
    "\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\053\uffcd" +
    "\054\uffcd\001\002\000\042\024\163\030\157\031\146\034" +
    "\152\035\160\036\154\037\155\040\162\041\164\042\156" +
    "\043\151\044\150\045\153\046\147\047\165\053\uffd8\001" +
    "\002\000\032\021\075\022\077\026\057\031\064\032\066" +
    "\055\122\056\132\057\121\060\063\061\053\062\054\063" +
    "\073\001\002\000\042\024\163\027\233\030\157\031\146" +
    "\034\152\035\160\036\154\037\155\040\162\041\164\042" +
    "\156\043\151\044\150\045\153\046\147\047\165\001\002" +
    "\000\054\010\017\011\023\012\026\013\076\014\074\016" +
    "\112\017\102\020\060\021\075\022\077\026\057\031\064" +
    "\032\066\051\110\055\122\056\113\057\121\060\063\061" +
    "\053\062\054\063\073\001\002\000\060\010\uffd7\011\uffd7" +
    "\012\uffd7\013\uffd7\014\uffd7\015\235\016\uffd7\017\uffd7\020" +
    "\uffd7\021\uffd7\022\uffd7\026\uffd7\031\uffd7\032\uffd7\051\uffd7" +
    "\052\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062" +
    "\uffd7\063\uffd7\001\002\000\054\010\017\011\023\012\026" +
    "\013\076\014\074\016\112\017\102\020\060\021\075\022" +
    "\077\026\057\031\064\032\066\051\110\055\122\056\113" +
    "\057\121\060\063\061\053\062\054\063\073\001\002\000" +
    "\060\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6" +
    "\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\026\uffd6\031" +
    "\uffd6\032\uffd6\051\uffd6\052\uffd6\055\uffd6\056\uffd6\057\uffd6" +
    "\060\uffd6\061\uffd6\062\uffd6\063\uffd6\001\002\000\060\010" +
    "\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4" +
    "\017\uffe4\020\uffe4\021\uffe4\022\uffe4\026\uffe4\031\uffe4\032" +
    "\uffe4\051\uffe4\052\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4" +
    "\061\uffe4\062\uffe4\063\uffe4\001\002\000\032\021\075\022" +
    "\077\026\057\031\064\032\066\055\122\056\132\057\121" +
    "\060\063\061\053\062\054\063\073\001\002\000\042\024" +
    "\163\030\157\031\146\034\152\035\160\036\154\037\155" +
    "\040\162\041\164\042\156\043\151\044\150\045\153\046" +
    "\147\047\165\053\uffdb\001\002\000\050\024\163\025\uffa2" +
    "\027\uffa2\030\157\031\uffa2\034\uffa2\035\uffa2\036\uffa2\037" +
    "\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2" +
    "\046\uffa2\047\uffa2\053\uffa2\054\uffa2\001\002\000\060\010" +
    "\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0" +
    "\017\uffe0\020\uffe0\021\uffe0\022\uffe0\026\uffe0\031\uffe0\032" +
    "\uffe0\051\uffe0\052\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0" +
    "\061\uffe0\062\uffe0\063\uffe0\001\002\000\050\024\163\025" +
    "\uffa1\027\uffa1\030\157\031\uffa1\034\uffa1\035\uffa1\036\uffa1" +
    "\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045" +
    "\uffa1\046\uffa1\047\uffa1\053\uffa1\054\uffa1\001\002\000\042" +
    "\024\163\027\246\030\157\031\146\034\152\035\160\036" +
    "\154\037\155\040\162\041\164\042\156\043\151\044\150" +
    "\045\153\046\147\047\165\001\002\000\050\024\uffc8\025" +
    "\uffc8\027\uffc8\030\uffc8\031\uffc8\034\uffc8\035\uffc8\036\uffc8" +
    "\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045" +
    "\uffc8\046\uffc8\047\uffc8\053\uffc8\054\uffc8\001\002\000\060" +
    "\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016" +
    "\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\026\uffdf\031\uffdf" +
    "\032\uffdf\051\uffdf\052\uffdf\055\uffdf\056\uffdf\057\uffdf\060" +
    "\uffdf\061\uffdf\062\uffdf\063\uffdf\001\002\000\012\010\017" +
    "\011\023\012\026\056\025\001\002\000\004\051\252\001" +
    "\002\000\056\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\026\uffe7\031" +
    "\uffe7\032\uffe7\051\uffe7\052\uffe7\055\uffe7\056\uffe7\057\uffe7" +
    "\060\uffe7\061\uffe7\062\uffe7\063\uffe7\001\002\000\056\010" +
    "\017\011\023\012\026\013\076\014\074\016\112\017\102" +
    "\020\060\021\075\022\077\026\057\031\064\032\066\051" +
    "\110\052\254\055\122\056\113\057\121\060\063\061\053" +
    "\062\054\063\073\001\002\000\020\006\uffeb\007\uffeb\010" +
    "\uffeb\011\uffeb\012\uffeb\052\uffeb\056\uffeb\001\002\000\006" +
    "\027\uffc2\054\uffc2\001\002\000\004\026\257\001\002\000" +
    "\014\010\017\011\023\012\026\027\261\056\025\001\002" +
    "\000\006\027\265\054\250\001\002\000\004\051\262\001" +
    "\002\000\056\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\026\uffe7\031" +
    "\uffe7\032\uffe7\051\uffe7\052\uffe7\055\uffe7\056\uffe7\057\uffe7" +
    "\060\uffe7\061\uffe7\062\uffe7\063\uffe7\001\002\000\056\010" +
    "\017\011\023\012\026\013\076\014\074\016\112\017\102" +
    "\020\060\021\075\022\077\026\057\031\064\032\066\051" +
    "\110\052\264\055\122\056\113\057\121\060\063\061\053" +
    "\062\054\063\073\001\002\000\020\006\uffea\007\uffea\010" +
    "\uffea\011\uffea\012\uffea\052\uffea\056\uffea\001\002\000\004" +
    "\051\266\001\002\000\056\010\uffe7\011\uffe7\012\uffe7\013" +
    "\uffe7\014\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7" +
    "\026\uffe7\031\uffe7\032\uffe7\051\uffe7\052\uffe7\055\uffe7\056" +
    "\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\001\002" +
    "\000\056\010\017\011\023\012\026\013\076\014\074\016" +
    "\112\017\102\020\060\021\075\022\077\026\057\031\064" +
    "\032\066\051\110\052\270\055\122\056\113\057\121\060" +
    "\063\061\053\062\054\063\073\001\002\000\020\006\uffe9" +
    "\007\uffe9\010\uffe9\011\uffe9\012\uffe9\052\uffe9\056\uffe9\001" +
    "\002\000\006\024\041\055\306\001\002\000\004\055\273" +
    "\001\002\000\004\026\274\001\002\000\014\010\017\011" +
    "\023\012\026\027\276\056\025\001\002\000\006\027\302" +
    "\054\250\001\002\000\004\051\277\001\002\000\056\010" +
    "\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\016\uffe7\017\uffe7" +
    "\020\uffe7\021\uffe7\022\uffe7\026\uffe7\031\uffe7\032\uffe7\051" +
    "\uffe7\052\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7" +
    "\062\uffe7\063\uffe7\001\002\000\056\010\017\011\023\012" +
    "\026\013\076\014\074\016\112\017\102\020\060\021\075" +
    "\022\077\026\057\031\064\032\066\051\110\052\301\055" +
    "\122\056\113\057\121\060\063\061\053\062\054\063\073" +
    "\001\002\000\020\006\uffee\007\uffee\010\uffee\011\uffee\012" +
    "\uffee\052\uffee\056\uffee\001\002\000\004\051\303\001\002" +
    "\000\056\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\016" +
    "\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\026\uffe7\031\uffe7" +
    "\032\uffe7\051\uffe7\052\uffe7\055\uffe7\056\uffe7\057\uffe7\060" +
    "\uffe7\061\uffe7\062\uffe7\063\uffe7\001\002\000\056\010\017" +
    "\011\023\012\026\013\076\014\074\016\112\017\102\020" +
    "\060\021\075\022\077\026\057\031\064\032\066\051\110" +
    "\052\305\055\122\056\113\057\121\060\063\061\053\062" +
    "\054\063\073\001\002\000\020\006\uffed\007\uffed\010\uffed" +
    "\011\uffed\012\uffed\052\uffed\056\uffed\001\002\000\004\026" +
    "\307\001\002\000\014\010\017\011\023\012\026\027\311" +
    "\056\025\001\002\000\006\027\315\054\250\001\002\000" +
    "\004\051\312\001\002\000\056\010\uffe7\011\uffe7\012\uffe7" +
    "\013\uffe7\014\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022" +
    "\uffe7\026\uffe7\031\uffe7\032\uffe7\051\uffe7\052\uffe7\055\uffe7" +
    "\056\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\001" +
    "\002\000\056\010\017\011\023\012\026\013\076\014\074" +
    "\016\112\017\102\020\060\021\075\022\077\026\057\031" +
    "\064\032\066\051\110\052\314\055\122\056\113\057\121" +
    "\060\063\061\053\062\054\063\073\001\002\000\020\006" +
    "\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\052\ufff0\056\ufff0" +
    "\001\002\000\004\051\316\001\002\000\056\010\uffe7\011" +
    "\uffe7\012\uffe7\013\uffe7\014\uffe7\016\uffe7\017\uffe7\020\uffe7" +
    "\021\uffe7\022\uffe7\026\uffe7\031\uffe7\032\uffe7\051\uffe7\052" +
    "\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7" +
    "\063\uffe7\001\002\000\056\010\017\011\023\012\026\013" +
    "\076\014\074\016\112\017\102\020\060\021\075\022\077" +
    "\026\057\031\064\032\066\051\110\052\320\055\122\056" +
    "\113\057\121\060\063\061\053\062\054\063\073\001\002" +
    "\000\020\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\052" +
    "\uffef\056\uffef\001\002\000\006\002\ufffd\004\ufffd\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\010\002\003\003\006\004\004\001\001\000" +
    "\002\001\001\000\004\003\320\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\014" +
    "\001\001\000\016\007\015\010\030\012\027\013\017\014" +
    "\021\041\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\270\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\037\043\040\046\041\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\051\001" +
    "\001\000\056\016\116\017\070\020\103\021\110\022\071" +
    "\023\115\024\106\025\102\026\064\027\054\030\055\031" +
    "\104\032\061\034\117\035\105\041\122\042\114\044\066" +
    "\045\100\046\077\047\067\050\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\030\055\031\104\032\061\034\117\035\105\042" +
    "\244\044\126\045\127\046\077\047\067\050\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\030\055\031\104\032\061\034\117" +
    "\035\105\042\243\044\126\045\127\046\077\047\067\050" +
    "\060\001\001\000\002\001\001\000\030\030\055\031\104" +
    "\032\061\034\117\035\105\042\241\044\126\045\127\046" +
    "\077\047\067\050\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\030\055" +
    "\031\104\032\061\034\117\035\105\042\227\044\126\045" +
    "\127\046\077\047\067\050\060\001\001\000\004\041\220" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\214\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\030\055\031\104\032\061\034\117\035\105" +
    "\042\130\044\126\045\127\046\077\047\067\050\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\160\001\001\000\002\001\001\000\006\032" +
    "\061\035\133\001\001\000\002\001\001\000\004\033\135" +
    "\001\001\000\002\001\001\000\032\030\055\031\104\032" +
    "\061\034\117\035\105\042\137\043\141\044\126\045\127" +
    "\046\077\047\067\050\060\001\001\000\004\036\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\030\055" +
    "\031\104\032\061\034\117\035\105\042\144\044\126\045" +
    "\127\046\077\047\067\050\060\001\001\000\002\001\001" +
    "\000\004\036\160\001\001\000\030\030\055\031\104\032" +
    "\061\034\117\035\105\042\206\044\126\045\127\046\077" +
    "\047\067\050\060\001\001\000\030\030\055\031\104\032" +
    "\061\034\117\035\105\042\205\044\126\045\127\046\077" +
    "\047\067\050\060\001\001\000\030\030\055\031\104\032" +
    "\061\034\117\035\105\042\204\044\126\045\127\046\077" +
    "\047\067\050\060\001\001\000\030\030\055\031\104\032" +
    "\061\034\117\035\105\042\203\044\126\045\127\046\077" +
    "\047\067\050\060\001\001\000\030\030\055\031\104\032" +
    "\061\034\117\035\105\042\202\044\126\045\127\046\077" +
    "\047\067\050\060\001\001\000\030\030\055\031\104\032" +
    "\061\034\117\035\105\042\201\044\126\045\127\046\077" +
    "\047\067\050\060\001\001\000\030\030\055\031\104\032" +
    "\061\034\117\035\105\042\200\044\126\045\127\046\077" +
    "\047\067\050\060\001\001\000\030\030\055\031\104\032" +
    "\061\034\117\035\105\042\177\044\126\045\127\046\077" +
    "\047\067\050\060\001\001\000\030\030\055\031\104\032" +
    "\061\034\117\035\105\042\176\044\126\045\127\046\077" +
    "\047\067\050\060\001\001\000\006\032\061\035\173\001" +
    "\001\000\030\030\055\031\104\032\061\034\117\035\105" +
    "\042\172\044\126\045\127\046\077\047\067\050\060\001" +
    "\001\000\002\001\001\000\030\030\055\031\104\032\061" +
    "\034\117\035\105\042\171\044\126\045\127\046\077\047" +
    "\067\050\060\001\001\000\030\030\055\031\104\032\061" +
    "\034\117\035\105\042\167\044\126\045\127\046\077\047" +
    "\067\050\060\001\001\000\030\030\055\031\104\032\061" +
    "\034\117\035\105\042\166\044\126\045\127\046\077\047" +
    "\067\050\060\001\001\000\030\030\055\031\104\032\061" +
    "\034\117\035\105\042\165\044\126\045\127\046\077\047" +
    "\067\050\060\001\001\000\004\036\160\001\001\000\004" +
    "\036\160\001\001\000\004\036\160\001\001\000\002\001" +
    "\001\000\004\036\160\001\001\000\004\036\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\135\001" +
    "\001\000\004\036\160\001\001\000\004\036\160\001\001" +
    "\000\004\036\160\001\001\000\004\036\160\001\001\000" +
    "\004\036\160\001\001\000\004\036\160\001\001\000\004" +
    "\036\160\001\001\000\004\036\160\001\001\000\004\036" +
    "\160\001\001\000\002\001\001\000\030\030\055\031\104" +
    "\032\061\034\117\035\105\042\211\044\126\045\127\046" +
    "\077\047\067\050\060\001\001\000\004\036\160\001\001" +
    "\000\056\016\213\017\070\020\103\021\110\022\071\023" +
    "\115\024\106\025\102\026\064\027\054\030\055\031\104" +
    "\032\061\034\117\035\105\041\122\042\114\044\066\045" +
    "\100\046\077\047\067\050\060\001\001\000\002\001\001" +
    "\000\056\016\116\017\070\020\103\021\110\022\071\023" +
    "\115\024\106\025\102\026\064\027\054\030\055\031\104" +
    "\032\061\034\117\035\105\041\122\042\114\044\066\045" +
    "\100\046\077\047\067\050\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\030\055\031\104\032\061\034\117\035\105\042\225\044" +
    "\126\045\127\046\077\047\067\050\060\001\001\000\004" +
    "\036\160\001\001\000\002\001\001\000\004\036\160\001" +
    "\001\000\030\030\055\031\104\032\061\034\117\035\105" +
    "\042\231\044\126\045\127\046\077\047\067\050\060\001" +
    "\001\000\004\036\160\001\001\000\056\016\233\017\070" +
    "\020\103\021\110\022\071\023\115\024\106\025\102\026" +
    "\064\027\054\030\055\031\104\032\061\034\117\035\105" +
    "\041\122\042\114\044\066\045\100\046\077\047\067\050" +
    "\060\001\001\000\002\001\001\000\056\016\235\017\070" +
    "\020\103\021\110\022\071\023\115\024\106\025\102\026" +
    "\064\027\054\030\055\031\104\032\061\034\117\035\105" +
    "\041\122\042\114\044\066\045\100\046\077\047\067\050" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\030\055\031\104\032\061\034\117\035\105\042\240\044" +
    "\126\045\127\046\077\047\067\050\060\001\001\000\004" +
    "\036\160\001\001\000\004\036\160\001\001\000\002\001" +
    "\001\000\004\036\160\001\001\000\004\036\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\040\254\041" +
    "\045\001\001\000\002\001\001\000\004\015\252\001\001" +
    "\000\056\016\116\017\070\020\103\021\110\022\071\023" +
    "\115\024\106\025\102\026\064\027\054\030\055\031\104" +
    "\032\061\034\117\035\105\041\122\042\114\044\066\045" +
    "\100\046\077\047\067\050\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\037\257\040" +
    "\046\041\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\262\001\001\000\056\016\116\017\070\020" +
    "\103\021\110\022\071\023\115\024\106\025\102\026\064" +
    "\027\054\030\055\031\104\032\061\034\117\035\105\041" +
    "\122\042\114\044\066\045\100\046\077\047\067\050\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\266\001\001\000\056\016\116\017\070\020\103\021\110" +
    "\022\071\023\115\024\106\025\102\026\064\027\054\030" +
    "\055\031\104\032\061\034\117\035\105\041\122\042\114" +
    "\044\066\045\100\046\077\047\067\050\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\037\274\040\046\041\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\277\001\001" +
    "\000\056\016\116\017\070\020\103\021\110\022\071\023" +
    "\115\024\106\025\102\026\064\027\054\030\055\031\104" +
    "\032\061\034\117\035\105\041\122\042\114\044\066\045" +
    "\100\046\077\047\067\050\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\303\001\001\000\056\016" +
    "\116\017\070\020\103\021\110\022\071\023\115\024\106" +
    "\025\102\026\064\027\054\030\055\031\104\032\061\034" +
    "\117\035\105\041\122\042\114\044\066\045\100\046\077" +
    "\047\067\050\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\037\307\040\046\041\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\312\001\001\000" +
    "\056\016\116\017\070\020\103\021\110\022\071\023\115" +
    "\024\106\025\102\026\064\027\054\030\055\031\104\032" +
    "\061\034\117\035\105\041\122\042\114\044\066\045\100" +
    "\046\077\047\067\050\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\316\001\001\000\056\016\116" +
    "\017\070\020\103\021\110\022\071\023\115\024\106\025" +
    "\102\026\064\027\054\030\055\031\104\032\061\034\117" +
    "\035\105\041\122\042\114\044\066\045\100\046\077\047" +
    "\067\050\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Token t = lexer.next_token();
	currentLine = t.getLine();

	if (printTokens)
		System.out.println(t.getLine() + ":" + t);
	return t; 

    }



	//**********************DEBUG*************************
	public boolean printTokens = false;
	public boolean printStates = false;
	//**********************DEBUG*************************
	
	private Lexer lexer;
	private int currentLine = 0;

	public parser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	}
	
	public int getLine() {
		return currentLine;
	}
	
	public String symbol_name_from_id(int id) {

		return sym.terminalNames[id];
	}
	
	public void syntax_error(Symbol s) {
		
		Token tok = (Token) s;
		StringBuilder sb;
		String exps = "";
		List<Integer> validToken = expected_token_ids();
		if(validToken.size() > 0) {
			sb = new StringBuilder();
			sb.append("Line " + tok.getLine()+": Syntax error; expected ");
			for(int i=0;i<validToken.size();i++) {
				exps = symbol_name_from_id(validToken.get(i));
				sb.append(exps + " , ");
				
			}
			sb.append("but found " + tok);
			report_fatal_error(sb.toString(), null);
		}
		else
			report_fatal_error("Line " + tok.getLine()+": Syntax error; unexpected " + tok, null);
	}

	public void report_fatal_error(String message, Object info){
		throw new ParserException(message);
	}

	private void printGrammar(String str) {
		if (printStates) { System.out.println(str); }
	}

	//**********************BONUS*************************
	private boolean isFaultyDecl(Statement s) {
		if(s instanceof LocalVariable) return true;
		return false;
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= icclass_list 
            {
              Program RESULT =null;
		int icclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int icclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<ICClass> iccl = (List<ICClass>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(iccl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= 
            {
              Program RESULT =null;
		 RESULT = new Program(new ArrayList<ICClass>()); printGrammar("made program"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // icclass_list ::= icclass 
            {
              List<ICClass> RESULT =null;
		int iccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iccright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ICClass icc = (ICClass)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<ICClass> classList = new ArrayList<ICClass>(); classList.add(icc); RESULT = classList; printGrammar("made class list with 1 class"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("icclass_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // icclass_list ::= icclass_list icclass 
            {
              List<ICClass> RESULT =null;
		int icclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int icclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<ICClass> iccl = (List<ICClass>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int iccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iccright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ICClass icc = (ICClass)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 iccl.add(icc); RESULT = iccl; printGrammar("made new class, and added to class list "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("icclass_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // icclass ::= CLASS CLASS_ID class_extends LBRACE class_body RBRACE 
            {
              ICClass RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String ci = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ce = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FieldsAndMethodsList cb = (FieldsAndMethodsList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
		Token c = ((Token)CUP$parser$stack.elementAt(CUP$parser$top-5));
		if (ce == null) {		/* there is no extention to the class */
		RESULT = new ICClass(c.getLine(), ci, cb.getFields(), cb.getMethods()); 
		} else {
		RESULT = new ICClass(c.getLine(), ci, ce,cb.getFields(), cb.getMethods()); 
		}
		printGrammar("made new class ");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("icclass",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // class_extends ::= EXTENDS CLASS_ID 
            {
              String RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String ci = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ci; printGrammar("class extends "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_extends",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // class_extends ::= 
            {
              String RESULT =null;
		 RESULT = null; printGrammar("class does not extends "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_extends",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // class_body ::= class_body field_list SEMI 
            {
              FieldsAndMethodsList RESULT =null;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FieldsAndMethodsList cb = (FieldsAndMethodsList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Field> fl = (List<Field>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 cb.insertFields(fl); RESULT = cb; printGrammar("class body fields "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // class_body ::= class_body method 
            {
              FieldsAndMethodsList RESULT =null;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FieldsAndMethodsList cb = (FieldsAndMethodsList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Method m = (Method)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 cb.insertMethod(m); RESULT = cb; printGrammar("class body method "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // class_body ::= 
            {
              FieldsAndMethodsList RESULT =null;
		 RESULT = new FieldsAndMethodsList(); printGrammar("class body finished "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // method ::= static_method 
            {
              Method RESULT =null;
		int smleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int smright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StaticMethod sm = (StaticMethod)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = sm; printGrammar("static method "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // method ::= virtual_method 
            {
              Method RESULT =null;
		int vmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VirtualMethod vm = (VirtualMethod)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vm; printGrammar("virtual method "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // field_list ::= field more_field_ids 
            {
              List<Field> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Field f = (Field)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mfileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mfiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<String> mfi = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<Field> fieldList = new ArrayList<Field>(); 
		fieldList.add(f);
		for(String fieldName: mfi){ Field fi = new Field(f.getType(), fieldName); fieldList.add(fi); } 
		RESULT = fieldList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // more_field_ids ::= COMA IDENTIFIER more_field_ids 
            {
              List<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mfileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mfiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<String> mfi = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = mfi; mfi.add(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_field_ids",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // more_field_ids ::= 
            {
              List<String> RESULT =null;
		 RESULT = new ArrayList<String>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_field_ids",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // field ::= type IDENTIFIER 
            {
              Field RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Field(t, id); printGrammar("added field " + id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // static_method ::= STATIC type IDENTIFIER LPAREN RPAREN LBRACE stmt_list RBRACE 
            {
              StaticMethod RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StaticMethod(t, id, new ArrayList<Formal>(), sl); printGrammar("added static method no formals: " + id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("static_method",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // static_method ::= STATIC type IDENTIFIER LPAREN formal_list RPAREN LBRACE stmt_list RBRACE 
            {
              StaticMethod RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Formal> fl = (List<Formal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StaticMethod(t, id, fl, sl); printGrammar("added static method " + id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("static_method",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // static_method ::= STATIC VOID IDENTIFIER LPAREN RPAREN LBRACE stmt_list RBRACE 
            {
              StaticMethod RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Token c = ((Token)CUP$parser$stack.elementAt(CUP$parser$top-5)); RESULT = new StaticMethod(new PrimitiveType(c.getLine(), DataTypes.VOID), id, new ArrayList<Formal>(), sl); printGrammar("added void static method no formals " + id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("static_method",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // static_method ::= STATIC VOID IDENTIFIER LPAREN formal_list RPAREN LBRACE stmt_list RBRACE 
            {
              StaticMethod RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Formal> fl = (List<Formal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Token c = ((Token)CUP$parser$stack.elementAt(CUP$parser$top-6)); RESULT = new StaticMethod(new PrimitiveType(c.getLine(), DataTypes.VOID) , id, fl, sl); printGrammar("added void static method " + id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("static_method",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // virtual_method ::= type IDENTIFIER LPAREN RPAREN LBRACE stmt_list RBRACE 
            {
              VirtualMethod RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VirtualMethod(t, id, new ArrayList<Formal>(), sl); printGrammar("added virtual method no formals: " + id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("virtual_method",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // virtual_method ::= type IDENTIFIER LPAREN formal_list RPAREN LBRACE stmt_list RBRACE 
            {
              VirtualMethod RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Formal> fl = (List<Formal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VirtualMethod(t, id, fl, sl); printGrammar("added virtual method " + id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("virtual_method",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // virtual_method ::= VOID IDENTIFIER LPAREN RPAREN LBRACE stmt_list RBRACE 
            {
              VirtualMethod RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Token c = ((Token)CUP$parser$stack.elementAt(CUP$parser$top-5)); RESULT = new VirtualMethod(new PrimitiveType(c.getLine(), DataTypes.VOID), id, new ArrayList<Formal>(), sl); printGrammar("added void virtual method no formal: " + id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("virtual_method",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // virtual_method ::= VOID IDENTIFIER LPAREN formal_list RPAREN LBRACE stmt_list RBRACE 
            {
              VirtualMethod RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Formal> fl = (List<Formal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Token c = ((Token)CUP$parser$stack.elementAt(CUP$parser$top-6)); RESULT = new VirtualMethod(new PrimitiveType(c.getLine(), DataTypes.VOID) , id, fl, sl); printGrammar("added void virtual method: " + id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("virtual_method",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt_list ::= stmt_list stmt 
            {
              List<Statement> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 sl.add(st); RESULT = sl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt_list ::= 
            {
              List<Statement> RESULT =null;
		 RESULT = new ArrayList<Statement>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= assignment_stmt SEMI 
            {
              Statement RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Assignment as = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = as; printGrammar("assignment_stmt under stmt "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= call_stmt 
            {
              Statement RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallStatement cs = (CallStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= return_stmt SEMI 
            {
              Statement RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Return rs = (Return)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = rs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= if_stmt 
            {
              Statement RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If is = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = is; printGrammar("if_stmt under stmt "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= if_else_stmt 
            {
              Statement RESULT =null;
		int iesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If ies = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ies; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= while_stmt 
            {
              Statement RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		While ws = (While)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ws; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= break_stmt SEMI 
            {
              Statement RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Break bs = (Break)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = bs; printGrammar("break_stmt under stmt "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= continue_stmt SEMI 
            {
              Statement RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Continue cs = (Continue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = cs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= stmt_block 
            {
              Statement RESULT =null;
		int sbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementsBlock sb = (StatementsBlock)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = sb; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= type IDENTIFIER SEMI 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LocalVariable(t, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= type IDENTIFIER EQ expr SEMI 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LocalVariable(t, i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // assignment_stmt ::= location EQ expr 
            {
              Assignment RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Location l = (Location)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Assignment(l, e); printGrammar("location eq expr under assignment_stmt "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // call_stmt ::= call_expr SEMI 
            {
              CallStatement RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Call ce = (Call)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =  new CallStatement(ce); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // return_stmt ::= RETURN 
            {
              Return RESULT =null;
		 RESULT = new Return(getLine()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // return_stmt ::= RETURN expr 
            {
              Return RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Return(getLine(), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // if_stmt ::= IF LPAREN expr RPAREN stmt 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(e, s); printGrammar("if_stmt if (expr) stmt "); 
			if(isFaultyDecl(s)) throw new ParserException("syntax error; invalid declaration of variable inside if statement!"); 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // if_else_stmt ::= IF LPAREN expr RPAREN stmt ELSE stmt 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(e, s1, s2); 
			if(isFaultyDecl(s2)) throw new ParserException("syntax error; invalid declaration of variable inside if statement!"); 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_else_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // while_stmt ::= WHILE LPAREN expr RPAREN stmt 
            {
              While RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new While(e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // break_stmt ::= BREAK 
            {
              Break RESULT =null;
		 RESULT = new Break(getLine()); printGrammar("break_stmt "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("break_stmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // continue_stmt ::= CONTINUE 
            {
              Continue RESULT =null;
		 RESULT = new Continue(getLine()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("continue_stmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // stmt_block ::= LBRACE stmt_list RBRACE 
            {
              StatementsBlock RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Token c = ((Token)CUP$parser$stack.elementAt(CUP$parser$top-2)); RESULT = new StatementsBlock(c.getLine(), sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_block",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= location 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Location l = (Location)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; printGrammar("location in expr "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= call_expr 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Call c = (Call)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= THIS 
            {
              Expression RESULT =null;
		 RESULT = new This(getLine()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= NEW CLASS_ID LPAREN RPAREN 
            {
              Expression RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String ci = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new NewClass(getLine(), ci); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= NEW type LBRACKET expr RBRACKET 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 t.incrementDimension(); RESULT = new NewArray(t, e); printGrammar("new in expr "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= expr DOT LENGTH 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Length(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= binop_expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= unop_expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= literal 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= LPAREN expr RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExpressionBlock(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // call_expr ::= static_call 
            {
              Call RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StaticCall sc = (StaticCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = sc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_expr",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // call_expr ::= virtual_call 
            {
              Call RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VirtualCall vc = (VirtualCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_expr",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr_list ::= expr 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<Expression> expsList = new ArrayList<Expression>(); expsList.add(e); RESULT = expsList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr_list ::= expr_list COMA expr 
            {
              List<Expression> RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Expression> el = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 el.add(e); RESULT = el; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // formal_list ::= formal 
            {
              List<Formal> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<Formal> formalList = new ArrayList<Formal>(); formalList.add(f); RESULT = formalList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // formal_list ::= formal_list COMA formal 
            {
              List<Formal> RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Formal> fl = (List<Formal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 fl.add(f); RESULT = fl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // formal ::= type IDENTIFIER 
            {
              Formal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Formal(t, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // type ::= INTEGER 
            {
              Type RESULT =null;
		 RESULT = new PrimitiveType(getLine(), DataTypes.INT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = new PrimitiveType(getLine(), DataTypes.BOOLEAN); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // type ::= STRING 
            {
              Type RESULT =null;
		 RESULT = new PrimitiveType(getLine(), DataTypes.STRING); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // type ::= CLASS_ID 
            {
              Type RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String ci = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UserType(getLine(), ci); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // type ::= type LBRACKET RBRACKET 
            {
              Type RESULT =null;
		int ftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type ft = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 ft.incrementDimension(); RESULT = ft; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // static_call ::= CLASS_ID DOT call_without_expr 
            {
              StaticCall RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String ci = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cweleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cweright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallParams cwe = (CallParams)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Token c = ((Token)CUP$parser$stack.elementAt(CUP$parser$top-2)); RESULT = new StaticCall(c.getLine(), ci, cwe.getMethodName(), cwe.getArguments()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("static_call",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // virtual_call ::= call_with_expr 
            {
              VirtualCall RESULT =null;
		int cweleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cweright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallParams cwe = (CallParams)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VirtualCall(cwe.getLine(), cwe.getLocation(), cwe.getMethodName(), cwe.getArguments()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("virtual_call",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // virtual_call ::= call_without_expr 
            {
              VirtualCall RESULT =null;
		int cweleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cweright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallParams cwe = (CallParams)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VirtualCall(cwe.getLine(), cwe.getMethodName(), cwe.getArguments()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("virtual_call",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // call_with_expr ::= expr DOT call_without_expr 
            {
              CallParams RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cweleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cweright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallParams cwe = (CallParams)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 cwe.setLocation(e); RESULT = cwe; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_with_expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // call_without_expr ::= call_without_exprs 
            {
              CallParams RESULT =null;
		int cweleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cweright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallParams cwe = (CallParams)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cwe; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_without_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // call_without_expr ::= IDENTIFIER call_with_exprs 
            {
              CallParams RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cweleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cweright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallParams cwe = (CallParams)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Token c = ((Token)CUP$parser$stack.elementAt(CUP$parser$top-1)); cwe.setLine(c.getLine()); cwe.setMethodName(id); RESULT = cwe; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_without_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // call_without_exprs ::= IDENTIFIER LPAREN RPAREN 
            {
              CallParams RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 Token c = ((Token)CUP$parser$stack.elementAt(CUP$parser$top-2)); CallParams cp = new CallParams(); cp.setMethodName(id); cp.setArguments(new ArrayList<Expression>());  cp.setLine(c.getLine()); RESULT = cp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_without_exprs",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // call_with_exprs ::= LPAREN expr_list RPAREN 
            {
              CallParams RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Expression> el = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 CallParams cp = new CallParams(); cp.setArguments(el); RESULT = cp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_with_exprs",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // dot_identifier ::= DOT IDENTIFIER 
            {
              java.lang.String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dot_identifier",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // location ::= IDENTIFIER 
            {
              Location RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VariableLocation(getLine(), id); printGrammar("location identifier " + id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // location ::= expr dot_identifier 
            {
              Location RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VariableLocation(getLine(), e, id); printGrammar("location dot identifier " + id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // location ::= expr LBRACKET expr RBRACKET 
            {
              Location RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayLocation(e1, e2); printGrammar("location expr[expr] : expr: " + e1 + "[expr] :" + e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // binop_expr ::= expr PLUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MathBinaryOp(e1, BinaryOps.PLUS, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop_expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // binop_expr ::= expr MINUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MathBinaryOp(e1, BinaryOps.MINUS, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop_expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // binop_expr ::= expr MULT expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MathBinaryOp(e1, BinaryOps.MULTIPLY, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop_expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // binop_expr ::= expr DIV expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MathBinaryOp(e1, BinaryOps.DIVIDE, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop_expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // binop_expr ::= expr MODULU expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MathBinaryOp(e1, BinaryOps.MOD, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop_expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // binop_expr ::= expr AND expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LogicalBinaryOp(e1, BinaryOps.LAND, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop_expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // binop_expr ::= expr OR expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LogicalBinaryOp(e1, BinaryOps.LOR, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop_expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // binop_expr ::= expr LT expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LogicalBinaryOp(e1, BinaryOps.LT, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop_expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // binop_expr ::= expr LTEQ expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LogicalBinaryOp(e1, BinaryOps.LTE, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop_expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // binop_expr ::= expr GT expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LogicalBinaryOp(e1, BinaryOps.GT, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop_expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // binop_expr ::= expr GTEQ expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LogicalBinaryOp(e1, BinaryOps.GTE, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop_expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // binop_expr ::= expr EQEQ expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LogicalBinaryOp(e1, BinaryOps.EQUAL, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop_expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // binop_expr ::= expr NEQ expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LogicalBinaryOp(e1, BinaryOps.NEQUAL, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop_expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // unop_expr ::= NOT expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LogicalUnaryOp(UnaryOps.LNEG, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unop_expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // unop_expr ::= MINUS expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MathUnaryOp(UnaryOps.UMINUS, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unop_expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // literal ::= STRING_LITERAL 
            {
              Literal RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String st = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(getLine(), LiteralTypes.STRING, st); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // literal ::= INTEGER_LITERAL 
            {
              Literal RESULT =null;
		int integrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int integrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Number integr = (java.lang.Number)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(getLine(), LiteralTypes.INTEGER, integr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // literal ::= TRUE_LITERAL 
            {
              Literal RESULT =null;
		 RESULT = new Literal(getLine(), LiteralTypes.TRUE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // literal ::= FALSE_LITERAL 
            {
              Literal RESULT =null;
		 RESULT = new Literal(getLine(), LiteralTypes.FALSE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // literal ::= NULL_LITERAL 
            {
              Literal RESULT =null;
		 RESULT = new Literal(getLine(), LiteralTypes.NULL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
