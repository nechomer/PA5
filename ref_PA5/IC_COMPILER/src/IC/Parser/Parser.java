
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jan 30 01:02:06 IST 2011
//----------------------------------------------------

package IC.Parser;

import IC.AST.*;
import java.util.List;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jan 30 01:02:06 IST 2011
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\006\007\000\002\006\011\000\002\006\006" +
    "\000\002\006\010\000\002\007\003\000\002\007\003\000" +
    "\002\007\004\000\002\007\004\000\002\011\004\000\002" +
    "\011\005\000\002\010\004\000\002\003\003\000\002\003" +
    "\003\000\002\004\007\000\002\004\007\000\002\005\006" +
    "\000\002\005\006\000\002\012\004\000\002\012\006\000" +
    "\002\013\004\000\002\013\005\000\002\016\004\000\002" +
    "\016\005\000\002\017\003\000\002\017\004\000\002\015" +
    "\006\000\002\015\004\000\002\015\004\000\002\015\005" +
    "\000\002\015\011\000\002\015\007\000\002\015\007\000" +
    "\002\015\004\000\002\015\004\000\002\015\003\000\002" +
    "\015\005\000\002\015\007\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\005" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\006\000\002\020\007\000\002\020\005\000\002" +
    "\020\005\000\002\020\004\000\002\020\003\000\002\020" +
    "\005\000\002\023\003\000\002\023\003\000\002\022\005" +
    "\000\002\022\004\000\002\021\003\000\002\021\004\000" +
    "\002\024\010\000\002\024\007\000\002\025\010\000\002" +
    "\025\007\000\002\025\006\000\002\025\005\000\002\026" +
    "\003\000\002\026\005\000\002\026\006\000\002\030\003" +
    "\000\002\030\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\250\000\004\007\005\001\002\000\006\002\001\007" +
    "\001\001\002\000\004\010\011\001\002\000\006\002\010" +
    "\007\005\001\002\000\006\002\uffff\007\uffff\001\002\000" +
    "\004\002\000\001\002\000\006\016\012\031\013\001\002" +
    "\000\004\010\246\001\002\000\020\005\017\010\023\025" +
    "\014\050\025\054\016\055\021\061\020\001\002\000\006" +
    "\023\uffd9\030\uffd9\001\002\000\020\005\ufffa\010\ufffa\025" +
    "\ufffa\050\ufffa\054\ufffa\055\ufffa\061\ufffa\001\002\000\014" +
    "\005\017\010\023\025\014\055\021\061\236\001\002\000" +
    "\006\023\uffd8\030\uffd8\001\002\000\004\023\233\001\002" +
    "\000\006\023\uffd7\030\uffd7\001\002\000\020\005\ufff3\010" +
    "\ufff3\025\ufff3\050\ufff3\054\ufff3\055\ufff3\061\ufff3\001\002" +
    "\000\006\023\uffd6\030\uffd6\001\002\000\006\023\040\030" +
    "\041\001\002\000\006\002\ufffc\007\ufffc\001\002\000\020" +
    "\005\ufff2\010\ufff2\025\ufff2\050\ufff2\054\ufff2\055\ufff2\061" +
    "\ufff2\001\002\000\006\011\035\053\036\001\002\000\020" +
    "\005\017\010\023\025\014\050\033\054\016\055\021\061" +
    "\020\001\002\000\020\005\ufff9\010\ufff9\025\ufff9\050\ufff9" +
    "\054\ufff9\055\ufff9\061\ufff9\001\002\000\020\005\ufff8\010" +
    "\ufff8\025\ufff8\050\ufff8\054\ufff8\055\ufff8\061\ufff8\001\002" +
    "\000\006\002\ufffe\007\ufffe\001\002\000\020\005\ufff7\010" +
    "\ufff7\025\ufff7\050\ufff7\054\ufff7\055\ufff7\061\ufff7\001\002" +
    "\000\004\023\037\001\002\000\020\005\ufff4\010\ufff4\025" +
    "\ufff4\050\ufff4\054\ufff4\055\ufff4\061\ufff4\001\002\000\006" +
    "\011\ufff5\053\ufff5\001\002\000\010\011\ufff6\032\044\053" +
    "\ufff6\001\002\000\004\047\042\001\002\000\006\023\uffd5" +
    "\030\uffd5\001\002\000\004\031\056\001\002\000\014\005" +
    "\017\010\023\025\014\052\046\055\021\001\002\000\006" +
    "\011\051\052\052\001\002\000\004\031\uffeb\001\002\000" +
    "\006\023\050\030\041\001\002\000\006\011\uffed\052\uffed" +
    "\001\002\000\012\005\017\010\023\025\014\055\021\001" +
    "\002\000\004\031\uffea\001\002\000\006\023\054\030\041" +
    "\001\002\000\006\011\uffec\052\uffec\001\002\000\020\005" +
    "\uffef\010\uffef\025\uffef\050\uffef\054\uffef\055\uffef\061\uffef" +
    "\001\002\000\056\005\017\006\100\010\107\012\057\020" +
    "\103\023\072\024\070\025\014\026\105\031\056\032\061" +
    "\034\075\040\102\044\104\045\111\050\113\051\065\055" +
    "\021\056\076\057\074\060\066\062\062\001\002\000\004" +
    "\053\232\001\002\000\042\004\227\013\uffd4\014\uffd4\015" +
    "\uffd4\021\uffd4\022\uffd4\027\uffd4\030\uffd4\035\uffd4\036\uffd4" +
    "\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\046\uffd4\001" +
    "\002\000\032\010\117\020\103\023\072\026\105\032\061" +
    "\034\075\040\102\044\104\045\111\056\076\057\074\060" +
    "\066\001\002\000\004\032\221\001\002\000\042\013\uffd3" +
    "\014\uffd3\015\uffd3\021\uffd3\022\uffd3\027\uffd3\030\uffd3\035" +
    "\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3" +
    "\046\uffd3\053\220\001\002\000\060\005\uffdc\006\uffdc\010" +
    "\uffdc\012\uffdc\017\uffdc\020\uffdc\023\uffdc\024\uffdc\025\uffdc" +
    "\026\uffdc\031\uffdc\032\uffdc\034\uffdc\040\uffdc\044\uffdc\045" +
    "\uffdc\050\uffdc\051\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc" +
    "\062\uffdc\001\002\000\034\010\117\020\103\023\072\026" +
    "\105\032\061\034\075\040\102\044\104\045\111\053\215" +
    "\056\076\057\074\060\066\001\002\000\050\011\uffaa\013" +
    "\uffaa\014\uffaa\015\uffaa\021\uffaa\022\uffaa\027\uffaa\030\uffaa" +
    "\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043" +
    "\uffaa\046\uffaa\047\uffaa\052\uffaa\053\uffaa\001\002\000\050" +
    "\011\uffcc\013\uffcc\014\uffcc\015\uffcc\021\uffcc\022\uffcc\027" +
    "\uffcc\030\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc" +
    "\042\uffcc\043\uffcc\046\uffcc\047\uffcc\052\uffcc\053\uffcc\001" +
    "\002\000\004\032\207\001\002\000\050\011\uffc9\013\uffc9" +
    "\014\uffc9\015\uffc9\021\uffc9\022\uffc9\027\uffc9\030\uffc9\035" +
    "\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9" +
    "\046\uffc9\047\uffc9\052\uffc9\053\uffc9\001\002\000\054\004" +
    "\uffbe\011\uffbe\013\uffbe\014\uffbe\015\uffbe\021\uffbe\022\uffbe" +
    "\027\uffbe\030\uffbe\032\203\035\uffbe\036\uffbe\037\uffbe\040" +
    "\uffbe\041\uffbe\042\uffbe\043\uffbe\046\uffbe\047\uffbe\052\uffbe" +
    "\053\uffbe\001\002\000\056\005\017\006\100\010\107\012" +
    "\057\020\103\023\072\024\070\025\014\026\105\031\056" +
    "\032\061\034\075\040\102\044\104\045\111\050\202\051" +
    "\065\055\021\056\076\057\074\060\066\062\062\001\002" +
    "\000\050\011\uffd2\013\uffd2\014\uffd2\015\uffd2\021\uffd2\022" +
    "\uffd2\027\uffd2\030\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2" +
    "\041\uffd2\042\uffd2\043\uffd2\046\uffd2\047\uffd2\052\uffd2\053" +
    "\uffd2\001\002\000\032\010\uffba\020\uffba\023\uffba\026\uffba" +
    "\032\uffba\034\uffba\040\uffba\044\uffba\045\uffba\056\uffba\057" +
    "\uffba\060\uffba\001\002\000\050\011\uffab\013\uffab\014\uffab" +
    "\015\uffab\021\uffab\022\uffab\027\uffab\030\uffab\035\uffab\036" +
    "\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\046\uffab" +
    "\047\uffab\052\uffab\053\uffab\001\002\000\006\023\174\030" +
    "\041\001\002\000\004\053\173\001\002\000\040\013\145" +
    "\014\147\015\134\021\137\022\141\027\140\030\142\035" +
    "\136\036\130\037\135\040\146\041\127\042\131\043\144" +
    "\046\133\001\002\000\032\010\uffbb\020\uffbb\023\uffbb\026" +
    "\uffbb\032\uffbb\034\uffbb\040\uffbb\044\uffbb\045\uffbb\056\uffbb" +
    "\057\uffbb\060\uffbb\001\002\000\050\011\uffa9\013\uffa9\014" +
    "\uffa9\015\uffa9\021\uffa9\022\uffa9\027\uffa9\030\uffa9\035\uffa9" +
    "\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\046" +
    "\uffa9\047\uffa9\052\uffa9\053\uffa9\001\002\000\012\005\017" +
    "\010\164\025\014\055\021\001\002\000\050\011\uffac\013" +
    "\uffac\014\uffac\015\uffac\021\uffac\022\uffac\027\uffac\030\uffac" +
    "\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043" +
    "\uffac\046\uffac\047\uffac\052\uffac\053\uffac\001\002\000\056" +
    "\005\uffe7\006\uffe7\010\uffe7\012\uffe7\020\uffe7\023\uffe7\024" +
    "\uffe7\025\uffe7\026\uffe7\031\uffe7\032\uffe7\034\uffe7\040\uffe7" +
    "\044\uffe7\045\uffe7\050\uffe7\051\uffe7\055\uffe7\056\uffe7\057" +
    "\uffe7\060\uffe7\062\uffe7\001\002\000\010\014\120\023\uffd6" +
    "\030\uffd6\001\002\000\050\011\uffca\013\uffca\014\uffca\015" +
    "\uffca\021\uffca\022\uffca\027\uffca\030\uffca\035\uffca\036\uffca" +
    "\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\046\uffca\047" +
    "\uffca\052\uffca\053\uffca\001\002\000\050\011\uffa8\013\uffa8" +
    "\014\uffa8\015\uffa8\021\uffa8\022\uffa8\027\uffa8\030\uffa8\035" +
    "\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8" +
    "\046\uffa8\047\uffa8\052\uffa8\053\uffa8\001\002\000\032\010" +
    "\117\020\103\023\072\026\105\032\061\034\075\040\102" +
    "\044\104\045\111\056\076\057\074\060\066\001\002\000" +
    "\064\005\uffe9\006\uffe9\010\uffe9\012\uffe9\017\uffe9\020\uffe9" +
    "\023\uffe9\024\uffe9\025\uffe9\026\uffe9\031\uffe9\032\uffe9\034" +
    "\uffe9\040\uffe9\044\uffe9\045\uffe9\050\uffe9\051\uffe9\054\uffe9" +
    "\055\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\001" +
    "\002\000\050\011\uffd4\013\uffd4\014\uffd4\015\uffd4\021\uffd4" +
    "\022\uffd4\027\uffd4\030\uffd4\035\uffd4\036\uffd4\037\uffd4\040" +
    "\uffd4\041\uffd4\042\uffd4\043\uffd4\046\uffd4\047\uffd4\052\uffd4" +
    "\053\uffd4\001\002\000\050\011\uffd3\013\uffd3\014\uffd3\015" +
    "\uffd3\021\uffd3\022\uffd3\027\uffd3\030\uffd3\035\uffd3\036\uffd3" +
    "\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\046\uffd3\047" +
    "\uffd3\052\uffd3\053\uffd3\001\002\000\050\011\uffcd\013\uffcd" +
    "\014\147\015\uffcd\021\uffcd\022\uffcd\027\uffcd\030\142\035" +
    "\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd" +
    "\046\uffcd\047\uffcd\052\uffcd\053\uffcd\001\002\000\004\014" +
    "\120\001\002\000\004\023\121\001\002\000\004\032\122" +
    "\001\002\000\034\010\117\020\103\023\072\026\105\032" +
    "\061\034\075\040\102\044\104\045\111\052\123\056\076" +
    "\057\074\060\066\001\002\000\050\011\uffc3\013\uffc3\014" +
    "\uffc3\015\uffc3\021\uffc3\022\uffc3\027\uffc3\030\uffc3\035\uffc3" +
    "\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\046" +
    "\uffc3\047\uffc3\052\uffc3\053\uffc3\001\002\000\044\011\143" +
    "\013\145\014\147\015\134\021\137\022\141\027\140\030" +
    "\142\035\136\036\130\037\135\040\146\041\127\042\131" +
    "\043\144\046\133\052\uffc6\001\002\000\004\052\126\001" +
    "\002\000\050\011\uffc4\013\uffc4\014\uffc4\015\uffc4\021\uffc4" +
    "\022\uffc4\027\uffc4\030\uffc4\035\uffc4\036\uffc4\037\uffc4\040" +
    "\uffc4\041\uffc4\042\uffc4\043\uffc4\046\uffc4\047\uffc4\052\uffc4" +
    "\053\uffc4\001\002\000\032\010\uffb5\020\uffb5\023\uffb5\026" +
    "\uffb5\032\uffb5\034\uffb5\040\uffb5\044\uffb5\045\uffb5\056\uffb5" +
    "\057\uffb5\060\uffb5\001\002\000\032\010\uffb2\020\uffb2\023" +
    "\uffb2\026\uffb2\032\uffb2\034\uffb2\040\uffb2\044\uffb2\045\uffb2" +
    "\056\uffb2\057\uffb2\060\uffb2\001\002\000\032\010\uffb7\020" +
    "\uffb7\023\uffb7\026\uffb7\032\uffb7\034\uffb7\040\uffb7\044\uffb7" +
    "\045\uffb7\056\uffb7\057\uffb7\060\uffb7\001\002\000\004\052" +
    "\uffc5\001\002\000\032\010\uffb9\020\uffb9\023\uffb9\026\uffb9" +
    "\032\uffb9\034\uffb9\040\uffb9\044\uffb9\045\uffb9\056\uffb9\057" +
    "\uffb9\060\uffb9\001\002\000\032\010\uffae\020\uffae\023\uffae" +
    "\026\uffae\032\uffae\034\uffae\040\uffae\044\uffae\045\uffae\056" +
    "\uffae\057\uffae\060\uffae\001\002\000\032\010\uffb1\020\uffb1" +
    "\023\uffb1\026\uffb1\032\uffb1\034\uffb1\040\uffb1\044\uffb1\045" +
    "\uffb1\056\uffb1\057\uffb1\060\uffb1\001\002\000\032\010\uffb3" +
    "\020\uffb3\023\uffb3\026\uffb3\032\uffb3\034\uffb3\040\uffb3\044" +
    "\uffb3\045\uffb3\056\uffb3\057\uffb3\060\uffb3\001\002\000\032" +
    "\010\uffb0\020\uffb0\023\uffb0\026\uffb0\032\uffb0\034\uffb0\040" +
    "\uffb0\044\uffb0\045\uffb0\056\uffb0\057\uffb0\060\uffb0\001\002" +
    "\000\032\010\uffb4\020\uffb4\023\uffb4\026\uffb4\032\uffb4\034" +
    "\uffb4\040\uffb4\044\uffb4\045\uffb4\056\uffb4\057\uffb4\060\uffb4" +
    "\001\002\000\032\010\uffaf\020\uffaf\023\uffaf\026\uffaf\032" +
    "\uffaf\034\uffaf\040\uffaf\044\uffaf\045\uffaf\056\uffaf\057\uffaf" +
    "\060\uffaf\001\002\000\032\010\117\020\103\023\072\026" +
    "\105\032\061\034\075\040\102\044\104\045\111\056\076" +
    "\057\074\060\066\001\002\000\032\010\117\020\103\023" +
    "\072\026\105\032\061\034\075\040\102\044\104\045\111" +
    "\056\076\057\074\060\066\001\002\000\032\010\uffad\020" +
    "\uffad\023\uffad\026\uffad\032\uffad\034\uffad\040\uffad\044\uffad" +
    "\045\uffad\056\uffad\057\uffad\060\uffad\001\002\000\032\010" +
    "\uffb6\020\uffb6\023\uffb6\026\uffb6\032\uffb6\034\uffb6\040\uffb6" +
    "\044\uffb6\045\uffb6\056\uffb6\057\uffb6\060\uffb6\001\002\000" +
    "\032\010\uffb8\020\uffb8\023\uffb8\026\uffb8\032\uffb8\034\uffb8" +
    "\040\uffb8\044\uffb8\045\uffb8\056\uffb8\057\uffb8\060\uffb8\001" +
    "\002\000\006\023\152\033\153\001\002\000\032\010\117" +
    "\020\103\023\072\026\105\032\061\034\075\040\102\044" +
    "\104\045\111\056\076\057\074\060\066\001\002\000\050" +
    "\011\uffce\013\145\014\147\015\134\021\137\022\141\027" +
    "\140\030\142\035\136\036\130\037\135\040\146\041\127" +
    "\042\131\043\144\046\133\047\uffce\052\uffce\053\uffce\001" +
    "\002\000\054\004\uffbd\011\uffbd\013\uffbd\014\uffbd\015\uffbd" +
    "\021\uffbd\022\uffbd\027\uffbd\030\uffbd\032\154\035\uffbd\036" +
    "\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\046\uffbd" +
    "\047\uffbd\052\uffbd\053\uffbd\001\002\000\050\011\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\021\uffcf\022\uffcf\027\uffcf\030\uffcf" +
    "\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043" +
    "\uffcf\046\uffcf\047\uffcf\052\uffcf\053\uffcf\001\002\000\034" +
    "\010\117\020\103\023\072\026\105\032\061\034\075\040" +
    "\102\044\104\045\111\052\155\056\076\057\074\060\066" +
    "\001\002\000\050\011\uffc1\013\uffc1\014\uffc1\015\uffc1\021" +
    "\uffc1\022\uffc1\027\uffc1\030\uffc1\035\uffc1\036\uffc1\037\uffc1" +
    "\040\uffc1\041\uffc1\042\uffc1\043\uffc1\046\uffc1\047\uffc1\052" +
    "\uffc1\053\uffc1\001\002\000\004\052\157\001\002\000\050" +
    "\011\uffc2\013\uffc2\014\uffc2\015\uffc2\021\uffc2\022\uffc2\027" +
    "\uffc2\030\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2" +
    "\042\uffc2\043\uffc2\046\uffc2\047\uffc2\052\uffc2\053\uffc2\001" +
    "\002\000\044\011\143\013\145\014\147\015\134\021\137" +
    "\022\141\027\140\030\142\035\136\036\130\037\135\040" +
    "\146\041\127\042\131\043\144\046\133\052\uffc7\001\002" +
    "\000\004\052\uffc8\001\002\000\042\013\145\014\147\015" +
    "\134\021\137\022\141\027\140\030\142\035\136\036\130" +
    "\037\135\040\146\041\127\042\131\043\144\046\133\047" +
    "\163\001\002\000\052\004\uffbc\011\uffbc\013\uffbc\014\uffbc" +
    "\015\uffbc\021\uffbc\022\uffbc\027\uffbc\030\uffbc\035\uffbc\036" +
    "\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\046\uffbc" +
    "\047\uffbc\052\uffbc\053\uffbc\001\002\000\006\030\uffd6\032" +
    "\171\001\002\000\004\030\166\001\002\000\034\010\117" +
    "\020\103\023\072\026\105\032\061\034\075\040\102\044" +
    "\104\045\111\047\042\056\076\057\074\060\066\001\002" +
    "\000\042\013\145\014\147\015\134\021\137\022\141\027" +
    "\140\030\142\035\136\036\130\037\135\040\146\041\127" +
    "\042\131\043\144\046\133\047\170\001\002\000\050\011" +
    "\uffd0\013\uffd0\014\uffd0\015\uffd0\021\uffd0\022\uffd0\027\uffd0" +
    "\030\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042" +
    "\uffd0\043\uffd0\046\uffd0\047\uffd0\052\uffd0\053\uffd0\001\002" +
    "\000\004\052\172\001\002\000\050\011\uffd1\013\uffd1\014" +
    "\uffd1\015\uffd1\021\uffd1\022\uffd1\027\uffd1\030\uffd1\035\uffd1" +
    "\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\046" +
    "\uffd1\047\uffd1\052\uffd1\053\uffd1\001\002\000\060\005\uffde" +
    "\006\uffde\010\uffde\012\uffde\017\uffde\020\uffde\023\uffde\024" +
    "\uffde\025\uffde\026\uffde\031\uffde\032\uffde\034\uffde\040\uffde" +
    "\044\uffde\045\uffde\050\uffde\051\uffde\055\uffde\056\uffde\057" +
    "\uffde\060\uffde\062\uffde\001\002\000\006\004\176\053\175" +
    "\001\002\000\060\005\uffdb\006\uffdb\010\uffdb\012\uffdb\017" +
    "\uffdb\020\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\031\uffdb" +
    "\032\uffdb\034\uffdb\040\uffdb\044\uffdb\045\uffdb\050\uffdb\051" +
    "\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\062\uffdb\001\002" +
    "\000\032\010\117\020\103\023\072\026\105\032\061\034" +
    "\075\040\102\044\104\045\111\056\076\057\074\060\066" +
    "\001\002\000\042\013\145\014\147\015\134\021\137\022" +
    "\141\027\140\030\142\035\136\036\130\037\135\040\146" +
    "\041\127\042\131\043\144\046\133\053\200\001\002\000" +
    "\060\005\uffda\006\uffda\010\uffda\012\uffda\017\uffda\020\uffda" +
    "\023\uffda\024\uffda\025\uffda\026\uffda\031\uffda\032\uffda\034" +
    "\uffda\040\uffda\044\uffda\045\uffda\050\uffda\051\uffda\055\uffda" +
    "\056\uffda\057\uffda\060\uffda\062\uffda\001\002\000\056\005" +
    "\uffe6\006\uffe6\010\uffe6\012\uffe6\020\uffe6\023\uffe6\024\uffe6" +
    "\025\uffe6\026\uffe6\031\uffe6\032\uffe6\034\uffe6\040\uffe6\044" +
    "\uffe6\045\uffe6\050\uffe6\051\uffe6\055\uffe6\056\uffe6\057\uffe6" +
    "\060\uffe6\062\uffe6\001\002\000\064\005\uffe8\006\uffe8\010" +
    "\uffe8\012\uffe8\017\uffe8\020\uffe8\023\uffe8\024\uffe8\025\uffe8" +
    "\026\uffe8\031\uffe8\032\uffe8\034\uffe8\040\uffe8\044\uffe8\045" +
    "\uffe8\050\uffe8\051\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8" +
    "\060\uffe8\061\uffe8\062\uffe8\001\002\000\034\010\117\020" +
    "\103\023\072\026\105\032\061\034\075\040\102\044\104" +
    "\045\111\052\204\056\076\057\074\060\066\001\002\000" +
    "\050\011\uffbf\013\uffbf\014\uffbf\015\uffbf\021\uffbf\022\uffbf" +
    "\027\uffbf\030\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041" +
    "\uffbf\042\uffbf\043\uffbf\046\uffbf\047\uffbf\052\uffbf\053\uffbf" +
    "\001\002\000\004\052\206\001\002\000\050\011\uffc0\013" +
    "\uffc0\014\uffc0\015\uffc0\021\uffc0\022\uffc0\027\uffc0\030\uffc0" +
    "\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043" +
    "\uffc0\046\uffc0\047\uffc0\052\uffc0\053\uffc0\001\002\000\032" +
    "\010\117\020\103\023\072\026\105\032\061\034\075\040" +
    "\102\044\104\045\111\056\076\057\074\060\066\001\002" +
    "\000\042\013\145\014\147\015\134\021\137\022\141\027" +
    "\140\030\142\035\136\036\130\037\135\040\146\041\127" +
    "\042\131\043\144\046\133\052\211\001\002\000\054\005" +
    "\017\006\100\010\107\012\057\020\103\023\072\024\070" +
    "\025\014\026\105\031\056\032\061\034\075\040\102\044" +
    "\104\045\111\051\065\055\021\056\076\057\074\060\066" +
    "\062\062\001\002\000\060\005\uffe0\006\uffe0\010\uffe0\012" +
    "\uffe0\017\213\020\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0" +
    "\031\uffe0\032\uffe0\034\uffe0\040\uffe0\044\uffe0\045\uffe0\050" +
    "\uffe0\051\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\062\uffe0" +
    "\001\002\000\054\005\017\006\100\010\107\012\057\020" +
    "\103\023\072\024\070\025\014\026\105\031\056\032\061" +
    "\034\075\040\102\044\104\045\111\051\065\055\021\056" +
    "\076\057\074\060\066\062\062\001\002\000\060\005\uffe1" +
    "\006\uffe1\010\uffe1\012\uffe1\017\uffe1\020\uffe1\023\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\031\uffe1\032\uffe1\034\uffe1\040\uffe1" +
    "\044\uffe1\045\uffe1\050\uffe1\051\uffe1\055\uffe1\056\uffe1\057" +
    "\uffe1\060\uffe1\062\uffe1\001\002\000\060\005\uffe3\006\uffe3" +
    "\010\uffe3\012\uffe3\017\uffe3\020\uffe3\023\uffe3\024\uffe3\025" +
    "\uffe3\026\uffe3\031\uffe3\032\uffe3\034\uffe3\040\uffe3\044\uffe3" +
    "\045\uffe3\050\uffe3\051\uffe3\055\uffe3\056\uffe3\057\uffe3\060" +
    "\uffe3\062\uffe3\001\002\000\042\013\145\014\147\015\134" +
    "\021\137\022\141\027\140\030\142\035\136\036\130\037" +
    "\135\040\146\041\127\042\131\043\144\046\133\053\217" +
    "\001\002\000\060\005\uffe2\006\uffe2\010\uffe2\012\uffe2\017" +
    "\uffe2\020\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\031\uffe2" +
    "\032\uffe2\034\uffe2\040\uffe2\044\uffe2\045\uffe2\050\uffe2\051" +
    "\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2\062\uffe2\001\002" +
    "\000\060\005\uffe4\006\uffe4\010\uffe4\012\uffe4\017\uffe4\020" +
    "\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\031\uffe4\032\uffe4" +
    "\034\uffe4\040\uffe4\044\uffe4\045\uffe4\050\uffe4\051\uffe4\055" +
    "\uffe4\056\uffe4\057\uffe4\060\uffe4\062\uffe4\001\002\000\032" +
    "\010\117\020\103\023\072\026\105\032\061\034\075\040" +
    "\102\044\104\045\111\056\076\057\074\060\066\001\002" +
    "\000\042\013\145\014\147\015\134\021\137\022\141\027" +
    "\140\030\142\035\136\036\130\037\135\040\146\041\127" +
    "\042\131\043\144\046\133\052\223\001\002\000\054\005" +
    "\017\006\100\010\107\012\057\020\103\023\072\024\070" +
    "\025\014\026\105\031\056\032\061\034\075\040\102\044" +
    "\104\045\111\051\065\055\021\056\076\057\074\060\066" +
    "\062\062\001\002\000\060\005\uffdf\006\uffdf\010\uffdf\012" +
    "\uffdf\017\uffdf\020\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf" +
    "\031\uffdf\032\uffdf\034\uffdf\040\uffdf\044\uffdf\045\uffdf\050" +
    "\uffdf\051\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\062\uffdf" +
    "\001\002\000\042\013\145\014\147\015\134\021\137\022" +
    "\141\027\140\030\142\035\136\036\130\037\135\040\146" +
    "\041\127\042\131\043\144\046\133\052\226\001\002\000" +
    "\050\011\uffcb\013\uffcb\014\uffcb\015\uffcb\021\uffcb\022\uffcb" +
    "\027\uffcb\030\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041" +
    "\uffcb\042\uffcb\043\uffcb\046\uffcb\047\uffcb\052\uffcb\053\uffcb" +
    "\001\002\000\032\010\117\020\103\023\072\026\105\032" +
    "\061\034\075\040\102\044\104\045\111\056\076\057\074" +
    "\060\066\001\002\000\042\013\145\014\147\015\134\021" +
    "\137\022\141\027\140\030\142\035\136\036\130\037\135" +
    "\040\146\041\127\042\131\043\144\046\133\053\231\001" +
    "\002\000\060\005\uffe5\006\uffe5\010\uffe5\012\uffe5\017\uffe5" +
    "\020\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\031\uffe5\032" +
    "\uffe5\034\uffe5\040\uffe5\044\uffe5\045\uffe5\050\uffe5\051\uffe5" +
    "\055\uffe5\056\uffe5\057\uffe5\060\uffe5\062\uffe5\001\002\000" +
    "\060\005\uffdd\006\uffdd\010\uffdd\012\uffdd\017\uffdd\020\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\026\uffdd\031\uffdd\032\uffdd\034" +
    "\uffdd\040\uffdd\044\uffdd\045\uffdd\050\uffdd\051\uffdd\055\uffdd" +
    "\056\uffdd\057\uffdd\060\uffdd\062\uffdd\001\002\000\004\032" +
    "\044\001\002\000\004\031\056\001\002\000\020\005\uffee" +
    "\010\uffee\025\uffee\050\uffee\054\uffee\055\uffee\061\uffee\001" +
    "\002\000\004\023\243\001\002\000\006\023\240\030\041" +
    "\001\002\000\004\032\044\001\002\000\004\031\056\001" +
    "\002\000\020\005\ufff1\010\ufff1\025\ufff1\050\ufff1\054\ufff1" +
    "\055\ufff1\061\ufff1\001\002\000\004\032\044\001\002\000" +
    "\004\031\056\001\002\000\020\005\ufff0\010\ufff0\025\ufff0" +
    "\050\ufff0\054\ufff0\055\ufff0\061\ufff0\001\002\000\004\031" +
    "\247\001\002\000\020\005\017\010\023\025\014\050\250" +
    "\054\016\055\021\061\020\001\002\000\006\002\ufffb\007" +
    "\ufffb\001\002\000\020\005\017\010\023\025\014\050\252" +
    "\054\016\055\021\061\020\001\002\000\006\002\ufffd\007" +
    "\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\250\000\006\002\005\006\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\030\004\021\005\025\007\027\010\014" +
    "\011\026\014\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\236\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\033\004\021\005\025\010" +
    "\031\011\026\014\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\054\001\001\000\006\012\044\014\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\014" +
    "\076\015\105\016\063\017\072\020\100\023\062\024\107" +
    "\025\070\026\057\030\111\031\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\020\224\023\114\024\107" +
    "\025\070\026\113\030\111\031\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\020\215" +
    "\023\114\024\107\025\070\026\113\030\111\031\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\014\076\015" +
    "\200\016\063\020\100\023\062\024\107\025\070\026\057" +
    "\030\111\031\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\020\115\023\114\024\107\025\070\026\113" +
    "\030\111\031\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\020" +
    "\123\021\124\023\114\024\107\025\070\026\113\030\111" +
    "\031\066\001\001\000\002\001\001\000\006\022\131\027" +
    "\147\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\020\161\023\114\024\107\025\070" +
    "\026\113\030\111\031\066\001\001\000\020\020\157\023" +
    "\114\024\107\025\070\026\113\030\111\031\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\020\150\023\114\024\107\025\070" +
    "\026\113\030\111\031\066\001\001\000\004\027\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\020\123" +
    "\021\155\023\114\024\107\025\070\026\113\030\111\031" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\022\160\027\147\001\001\000\002\001" +
    "\001\000\004\027\147\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\020\166\023\114\024" +
    "\107\025\070\026\113\030\111\031\066\001\001\000\004" +
    "\027\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\020\176\023\114\024\107\025\070\026" +
    "\113\030\111\031\066\001\001\000\004\027\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\020\123\021\204\023\114\024\107\025\070\026\113" +
    "\030\111\031\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\020\207\023\114\024\107" +
    "\025\070\026\113\030\111\031\066\001\001\000\004\027" +
    "\147\001\001\000\026\014\076\015\211\016\063\020\100" +
    "\023\062\024\107\025\070\026\057\030\111\031\066\001" +
    "\001\000\002\001\001\000\026\014\076\015\213\016\063" +
    "\020\100\023\062\024\107\025\070\026\057\030\111\031" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\020\221\023\114\024\107\025\070\026\113\030\111" +
    "\031\066\001\001\000\004\027\147\001\001\000\026\014" +
    "\076\015\223\016\063\020\100\023\062\024\107\025\070" +
    "\026\057\030\111\031\066\001\001\000\002\001\001\000" +
    "\004\027\147\001\001\000\002\001\001\000\020\020\227" +
    "\023\114\024\107\025\070\026\113\030\111\031\066\001" +
    "\001\000\004\027\147\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\233\001\001\000\004\016\234\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\240\001\001\000\004\016\241\001\001\000" +
    "\002\001\001\000\004\013\243\001\001\000\004\016\244" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\030\004\021\005\025\007\250\010\014\011\026\014\023" +
    "\001\001\000\002\001\001\000\016\003\033\004\021\005" +
    "\025\010\031\011\026\014\023\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LITERAL ::= NULL 
            {
              Literal RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Literal(n.getLine(), IC.LiteralTypes.NULL, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LITERAL ::= FALSE 
            {
              Literal RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token f = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Literal(f.getLine(), IC.LiteralTypes.FALSE, new Boolean(false)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LITERAL ::= TRUE 
            {
              Literal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Literal(t.getLine(), IC.LiteralTypes.TRUE, new Boolean(true)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LITERAL ::= QUOTE 
            {
              Literal RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Literal(s.getLine(), IC.LiteralTypes.STRING, s.getValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LITERAL ::= INTEGER 
            {
              Literal RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Literal(n.getLine(), IC.LiteralTypes.INTEGER, Integer.parseInt(n.getValue())); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // BINOP ::= NEQUAL 
            {
              IC.BinaryOps RESULT =null;
		 RESULT = IC.BinaryOps.NEQUAL; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINOP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // BINOP ::= EQUAL 
            {
              IC.BinaryOps RESULT =null;
		 RESULT = IC.BinaryOps.EQUAL; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINOP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // BINOP ::= GTE 
            {
              IC.BinaryOps RESULT =null;
		 RESULT = IC.BinaryOps.GTE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINOP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // BINOP ::= GT 
            {
              IC.BinaryOps RESULT =null;
		 RESULT = IC.BinaryOps.GT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINOP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // BINOP ::= LTE 
            {
              IC.BinaryOps RESULT =null;
		 RESULT = IC.BinaryOps.LTE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINOP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // BINOP ::= LT 
            {
              IC.BinaryOps RESULT =null;
		 RESULT = IC.BinaryOps.LT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINOP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // BINOP ::= LOR 
            {
              IC.BinaryOps RESULT =null;
		 RESULT = IC.BinaryOps.LOR; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINOP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // BINOP ::= LAND 
            {
              IC.BinaryOps RESULT =null;
		 RESULT = IC.BinaryOps.LAND; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINOP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // BINOP ::= MOD 
            {
              IC.BinaryOps RESULT =null;
		 RESULT = IC.BinaryOps.MOD; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINOP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // BINOP ::= DIVIDE 
            {
              IC.BinaryOps RESULT =null;
		 RESULT = IC.BinaryOps.DIVIDE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINOP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // BINOP ::= MULTIPLY 
            {
              IC.BinaryOps RESULT =null;
		 RESULT = IC.BinaryOps.MULTIPLY; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINOP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // BINOP ::= MINUS 
            {
              IC.BinaryOps RESULT =null;
		 RESULT = IC.BinaryOps.MINUS; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINOP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // BINOP ::= PLUS 
            {
              IC.BinaryOps RESULT =null;
		 RESULT = IC.BinaryOps.PLUS; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINOP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // UNOP ::= LNEG 
            {
              IC.UnaryOps RESULT =null;
		 RESULT = IC.UnaryOps.LNEG; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNOP",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // UNOP ::= MINUS 
            {
              IC.UnaryOps RESULT =null;
		 RESULT = IC.UnaryOps.UMINUS; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNOP",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LOCATION ::= EXPRESSION LB EXPRESSION RB 
            {
              Location RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayLocation(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOCATION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LOCATION ::= EXPRESSION DOT ID 
            {
              Location RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VariableLocation(i.getLine(),e, i.getValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOCATION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LOCATION ::= ID 
            {
              Location RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VariableLocation(i.getLine(),i.getValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOCATION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VIRTUAL_CALL ::= ID LP RP 
            {
              VirtualCall RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new VirtualCall(i.getLine(), i.getValue(), new LinkedList<Expression>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VIRTUAL_CALL",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VIRTUAL_CALL ::= ID LP EXPRESSIONS RP 
            {
              VirtualCall RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> args = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VirtualCall(i.getLine(), i.getValue(), args); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VIRTUAL_CALL",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VIRTUAL_CALL ::= EXPRESSION DOT ID LP RP 
            {
              VirtualCall RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new VirtualCall(i.getLine(), e, i.getValue(), new LinkedList<Expression>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VIRTUAL_CALL",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VIRTUAL_CALL ::= EXPRESSION DOT ID LP EXPRESSIONS RP 
            {
              VirtualCall RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> args = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VirtualCall(i.getLine(), e, i.getValue(), args); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VIRTUAL_CALL",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // STATIC_CALL ::= CLASS_ID DOT ID LP RP 
            {
              StaticCall RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new StaticCall(c.getLine(), c.getValue(), i.getValue(), new LinkedList<Expression>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATIC_CALL",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // STATIC_CALL ::= CLASS_ID DOT ID LP EXPRESSIONS RP 
            {
              StaticCall RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> args = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StaticCall(c.getLine(), c.getValue(), i.getValue(), args); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATIC_CALL",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESSIONS ::= EXPRESSION EXPRESSIONS_PART 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int epleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int epright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Expression> ep = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ep; ep.add(0, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONS",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESSIONS ::= EXPRESSION 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Expression>(); RESULT.add (e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONS",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESSIONS_PART ::= COMMA EXPRESSION 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Expression>(); RESULT.add (e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONS_PART",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESSIONS_PART ::= COMMA EXPRESSION EXPRESSIONS_PART 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int epleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int epright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Expression> ep = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ep; ep.add (0, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONS_PART",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CALL ::= VIRTUAL_CALL 
            {
              Call RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VirtualCall v = (VirtualCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CALL ::= STATIC_CALL 
            {
              Call RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StaticCall s = (StaticCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESSION ::= LP EXPRESSION RP 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ExpressionBlock(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESSION ::= LITERAL 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESSION ::= UNOP EXPRESSION 
            {
              Expression RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IC.UnaryOps u = (IC.UnaryOps)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = OpFactory.make(u,e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESSION ::= EXPRESSION BINOP EXPRESSION 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IC.BinaryOps b = (IC.BinaryOps)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = OpFactory.make(e1, b, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESSION ::= EXPRESSION DOT LENGTH 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Length(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESSION ::= NEW TYPE LB EXPRESSION RB 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NewArray(t, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESSION ::= NEW CLASS_ID LP RP 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new NewClass(c.getLine(), c.getValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESSION ::= THIS 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new This(t.getLine()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESSION ::= CALL 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Call c = (Call)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESSION ::= LOCATION 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Location l = (Location)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TYPE ::= TYPE LB RB 
            {
              Type RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = type; type.incrementDimension(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TYPE ::= CLASS_ID 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UserType(c.getLine(), c.getValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TYPE ::= STRING 
            {
              Type RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrimitiveType(s.getLine(), IC.DataTypes.STRING); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TYPE ::= BOOLEAN 
            {
              Type RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrimitiveType(b.getLine(), IC.DataTypes.BOOLEAN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TYPE ::= INT 
            {
              Type RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrimitiveType(n.getLine(), IC.DataTypes.INT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // STATEMENT ::= TYPE ID ASSIGN EXPRESSION SEMI 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LocalVariable(t, i.getValue(), e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // STATEMENT ::= TYPE ID SEMI 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LocalVariable(t, i.getValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // STATEMENT ::= STATEMENTS_BLOCK 
            {
              Statement RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementsBlock st = (StatementsBlock)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = st; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // STATEMENT ::= CONTINUE SEMI 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Continue(c.getLine()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // STATEMENT ::= BREAK SEMI 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Break(b.getLine()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // STATEMENT ::= WHILE LP EXPRESSION RP STATEMENT 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new While(e, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // STATEMENT ::= IF LP EXPRESSION RP STATEMENT 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(e, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // STATEMENT ::= IF LP EXPRESSION RP STATEMENT ELSE STATEMENT 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(e, s1, s2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // STATEMENT ::= RETURN EXPRESSION SEMI 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Return(r.getLine(), e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // STATEMENT ::= RETURN SEMI 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Return(r.getLine()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // STATEMENT ::= CALL SEMI 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Call c = (Call)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CallStatement(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // STATEMENT ::= LOCATION ASSIGN EXPRESSION SEMI 
            {
              Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Location l = (Location)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Assignment(l, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // STATEMENTS ::= STATEMENTS STATEMENT 
            {
              List<Statement> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> st = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = st; st.add (s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // STATEMENTS ::= STATEMENT 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Statement>(); RESULT.add (s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // STATEMENTS_BLOCK ::= LCBR STATEMENTS RCBR 
            {
              StatementsBlock RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> st = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StatementsBlock (l.getLine(), st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS_BLOCK",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // STATEMENTS_BLOCK ::= LCBR RCBR 
            {
              StatementsBlock RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StatementsBlock (l.getLine(), new LinkedList<Statement>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS_BLOCK",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FORMALS_LIST ::= LP FORMALS RP 
            {
              List<Formal> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Formal> f = (List<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FORMALS_LIST",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FORMALS_LIST ::= LP RP 
            {
              List<Formal> RESULT =null;
		 RESULT = new LinkedList<Formal>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FORMALS_LIST",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FORMALS ::= FORMALS COMMA TYPE ID 
            {
              List<Formal> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Formal> f = (List<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f; f.add (new Formal (t, id.getValue())); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FORMALS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FORMALS ::= TYPE ID 
            {
              List<Formal> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Formal>(); RESULT.add (new Formal (t, id.getValue())); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FORMALS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VIRTUAL_METHOD ::= VOID ID FORMALS_LIST STATEMENTS_BLOCK 
            {
              VirtualMethod RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Formal> f = (List<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementsBlock body = (StatementsBlock)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VirtualMethod (new PrimitiveType(v.getLine(), IC.DataTypes.VOID), id.getValue(), f, body.getStatements()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VIRTUAL_METHOD",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VIRTUAL_METHOD ::= TYPE ID FORMALS_LIST STATEMENTS_BLOCK 
            {
              VirtualMethod RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Formal> f = (List<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementsBlock body = (StatementsBlock)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VirtualMethod (t, id.getValue(), f, body.getStatements()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VIRTUAL_METHOD",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // STATIC_METHOD ::= STATIC VOID ID FORMALS_LIST STATEMENTS_BLOCK 
            {
              StaticMethod RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Formal> f = (List<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementsBlock body = (StatementsBlock)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StaticMethod (new PrimitiveType(v.getLine(), IC.DataTypes.VOID), id.getValue(), f, body.getStatements()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATIC_METHOD",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // STATIC_METHOD ::= STATIC TYPE ID FORMALS_LIST STATEMENTS_BLOCK 
            {
              StaticMethod RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Formal> f = (List<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementsBlock body = (StatementsBlock)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StaticMethod (t, id.getValue(), f, body.getStatements()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATIC_METHOD",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // METHOD ::= VIRTUAL_METHOD 
            {
              Method RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VirtualMethod m = (VirtualMethod)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = m; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METHOD",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // METHOD ::= STATIC_METHOD 
            {
              Method RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StaticMethod m = (StaticMethod)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = m; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METHOD",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FIELDS ::= FIELD_PART SEMI 
            {
              List<Field> RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Field> fp = (List<Field>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = fp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FIELDS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FIELD_PART ::= FIELD_PART COMMA ID 
            {
              List<Field> RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Field> fp = (List<Field>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fp; RESULT.add (new Field (fp.get(0).getType(), id.getValue())); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FIELD_PART",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FIELD_PART ::= TYPE ID 
            {
              List<Field> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Field>(); RESULT.add (new Field(t, id.getValue())); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FIELD_PART",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FIELDS_AND_METHODS ::= FIELDS_AND_METHODS METHOD 
            {
              ClassBody RESULT =null;
		int fmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ClassBody fm = (ClassBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Method m = (Method)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fm; fm.add (m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FIELDS_AND_METHODS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FIELDS_AND_METHODS ::= FIELDS_AND_METHODS FIELDS 
            {
              ClassBody RESULT =null;
		int fmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ClassBody fm = (ClassBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Field> f = (List<Field>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fm; fm.add (f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FIELDS_AND_METHODS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FIELDS_AND_METHODS ::= METHOD 
            {
              ClassBody RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Method m = (Method)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ClassBody(); RESULT.add (m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FIELDS_AND_METHODS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FIELDS_AND_METHODS ::= FIELDS 
            {
              ClassBody RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Field> f = (List<Field>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ClassBody(); RESULT.add (f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FIELDS_AND_METHODS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CLASS_DEC ::= CLASS CLASS_ID EXTENDS CLASS_ID LCBR RCBR 
            {
              ICClass RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token c1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token c2 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new ICClass (c1.getLine(), c1.getValue(), c2.getValue(), new LinkedList<Field>(), new LinkedList<Method>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CLASS_DEC",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CLASS_DEC ::= CLASS CLASS_ID LCBR RCBR 
            {
              ICClass RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token c1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new ICClass (c1.getLine(), c1.getValue(), new LinkedList<Field>(), new LinkedList<Method>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CLASS_DEC",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CLASS_DEC ::= CLASS CLASS_ID EXTENDS CLASS_ID LCBR FIELDS_AND_METHODS RCBR 
            {
              ICClass RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token c1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token c2 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ClassBody fm = (ClassBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ICClass(c1.getLine(), c1.getValue(), c2.getValue(), fm.getFields(), fm.getMethods()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CLASS_DEC",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CLASS_DEC ::= CLASS CLASS_ID LCBR FIELDS_AND_METHODS RCBR 
            {
              ICClass RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token c1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ClassBody fm = (ClassBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ICClass (c1.getLine(), c1.getValue(), fm.getFields(), fm.getMethods()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CLASS_DEC",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAM ::= PROGRAM CLASS_DEC 
            {
              Program RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program p = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cd1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cd1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ICClass cd1 = (ICClass)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        p.getClasses().add(cd1);
                        RESULT = p;
                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAM ::= CLASS_DEC 
            {
              Program RESULT =null;
		int cd1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cd1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ICClass cd1 = (ICClass)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<ICClass> TEMP_LIST = new LinkedList<ICClass>();
                        TEMP_LIST.add(cd1); RESULT = new Program(TEMP_LIST); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

