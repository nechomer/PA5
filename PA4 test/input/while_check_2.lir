str_err_null_ptr_ref:		"Runtime Error: Null pointer dereference!"
str_err_arr_out_of_bounds:	"Runtime Error: Array index out of bounds!"
str_err_neg_arr_size:	"Runtime Error: Array allocation with negative array size!"
str_err_div_by_zero:	"Runtime Error: Division by zero!"
str1:	"i is "
str2:	""
str3:	"j is "

# class A
# Dispatch vector:
_DV_A: []
# Field offsets


# Check Null Ptr Reference:
# static void checkNullRef(array a){
# 	if(a == null) {Library.println(...);
# 	Library.exit(1);
# 	}
# }
__checkNullRef:
	Move a, R0
	Compare 0, R0
	JumpTrue _error1
	Return Rdummy
_error1:
	Library __println(str_err_null_ptr_ref),Rdummy
	Library __exit(1),Rdummy

# Check Array Index Out Of Bounds:
# static void checkArrayAccess(array a, index i) {
# 	if (i<0 || i>=a.length) {
# 	Library.println("Runtime Error");
# 	}
# }
__checkArrayAccess:
	Move i, R0
	Compare 0, R0
	JumpL _error2
	ArrayLength a, R0
	Compare i, R0
	JumpLE _error2	Return Rdummy
_error2:
	Library __println(str_err_arr_out_of_bounds),Rdummy
	Library __exit(1),Rdummy

# Check Array Allocation Is Not With Negative Number:
# static void checkSize(size n) {
# 	if (n<0) Library.println("Runtime Error");
# }
__checkSize:
	Move n, R0
	Compare 0, R0
	JumpLE _error3
	Return Rdummy
_error3:
	Library __println(str_err_neg_arr_size),Rdummy
	Library __exit(1),Rdummy

# Check Division By Zero:
# static void checkZero(value b) {
# 	if (b == 0) Library.println("Runtime Error");
# }
__checkZero:
	Move b, R0
	Compare 0, R0	JumpTrue _error4
	Return Rdummy
_error4:
	Library __println(str_err_div_by_zero),Rdummy
	Library __exit(1),Rdummy


_ic_main:
Move 0, i
Move 0, j
_test_label_1:
Move 0, R0
Move 1, R1
Move 2, R2
Compare R1, R2
JumpLE _logical_op_end_3
Move 1, R0
_logical_op_end_3:
Compare 0, R0
JumpTrue _end_label_2
Jump _end_label_2
Jump _test_label_1
_end_label_2:
_test_label_4:
Move 0, R0
Move i, R1
Move 3, R2
Compare R1, R2
JumpLE _logical_op_end_6
Move 1, R0
_logical_op_end_6:
Compare 0, R0
JumpTrue _end_label_5
Move 0, R0
Move R0, j
_test_label_7:
Move 0, R0
Move j, R1
Move 2, R2
Compare R1, R2
JumpLE _logical_op_end_9
Move 1, R0
_logical_op_end_9:
Compare 0, R0
JumpTrue _end_label_8
Move j, R0
Move 1, R1
Add R1, R0
Move R0, j
Move str1, R1
StaticCall __checkNullRef(a=R1),Rdummy
Library __print(R1), Rdummy
Move i, R1
Library __printi(R1), Rdummy
Move str2, R1
StaticCall __checkNullRef(a=R1),Rdummy
Library __println(R1), Rdummy
Move str3, R1
StaticCall __checkNullRef(a=R1),Rdummy
Library __print(R1), Rdummy
Move j, R1
Library __printi(R1), Rdummy
Move str2, R1
StaticCall __checkNullRef(a=R1),Rdummy
Library __println(R1), Rdummy
Jump _test_label_7
_end_label_8:
Move i, R0
Move 1, R1
Add R1, R0
Move R0, i
Jump _test_label_4
_end_label_5:
Library __exit(0),Rdummy
