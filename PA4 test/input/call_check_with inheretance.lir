str_err_null_ptr_ref:		"Runtime Error: Null pointer dereference!"
str_err_arr_out_of_bounds: 	"Runtime Error: Array index out of bounds!"
str_err_neg_arr_size: 	"Runtime Error: Array allocation with negative array size!"
str_err_div_by_zero: 	"Runtime Error: Division by zero!"
str1:	"foo inside main class"
str2:	"static foo inside main class"
str3:	"foo inside X"
str4:	"foo inside Y"
str5:	"foo inside Z"
# End of constant strings section

# class CallChecks
# Dispatch vector:
_DV_CallChecks: [_CallChecks_foo]
# Field offsets

# class X
# Dispatch vector:
_DV_X: [_X_foo]
# Field offsets

# class Y
# Dispatch vector:
_DV_Y: [_Y_foo]
# Field offsets

# class Z
# Dispatch vector:
_DV_Z: [_Z_foo]
# Field offsets

# End of dispatch table section

# Check Null Ptr Reference:
# static void checkNullRef(array a){
# 	if(a == null) {Library.println(...);
# 	Library.exit(1);
# 	}
# }
__checkNullRef:
	Move a, R0
	Compare 0, R0
	JumpTrue __checkNullRef_epilogue
	Return Rdummy
__checkNullRef_epilogue:
	Library __println(str_err_null_ptr_ref), Rdummy
	Library __exit(1), Rdummy

# Check Array Index Out Of Bounds:
# static void checkArrayAccess(array a, index i) {
# 	if (i<0 || i>=a.length) {
# 	Library.println("Runtime Error");
# 	}
# }
__checkArrayAccess:
	Move i, R0
	Compare 0, R0
	JumpL __checkArrayAccess_epilogue
	ArrayLength a, R0
	Compare i, R0
	JumpLE __checkArrayAccess_epilogue
	Return Rdummy
__checkArrayAccess_epilogue:
	Library __println(str_err_arr_out_of_bounds), Rdummy
	Library __exit(1), Rdummy

# Check Array Allocation Is Not With Negative Number:
# static void checkSize(size n) {
# 	if (n<0) Library.println("Runtime Error");
# }
__checkSize:
	Move n, R0
	Compare 0, R0
	JumpLE __checkSize_epilogue
	Return Rdummy
__checkSize_epilogue:
	Library __println(str_err_neg_arr_size), Rdummy
	Library __exit(1), Rdummy

# Check Division By Zero:
# static void checkZero(value b) {
# 	if (b == 0) Library.println("Runtime Error");
# }
__checkZero:
	Move b, R0
	Compare 0, R0
	JumpTrue __checkZero_epilogue
	Return Rdummy
__checkZero_epilogue:
	Library __println(str_err_div_by_zero), Rdummy
	Library __exit(1), Rdummy


__ic_main:
Library __allocateObject(4), R0
MoveField _DV_X, R0.0
Move R0, x_main
Library __allocateObject(4), R0
MoveField _DV_Y, R0.0
Move R0, y_main
Library __allocateObject(4), R0
MoveField _DV_Z, R0.0
Move R0, z_main
Move x_main, R1
StaticCall __checkNullRef(a=R1), Rdummy
Move 1, R2
Move 2, R3
VirtualCall R1.0(a=R2,b=R3), Rdummy
Move y_main, R1
StaticCall __checkNullRef(a=R1), Rdummy
Move 1, R2
Move 2, R3
VirtualCall R1.0(a=R2,b=R3), Rdummy
Move z_main, R1
StaticCall __checkNullRef(a=R1), Rdummy
Move 1, R2
Move 2, R3
VirtualCall R1.0(a=R2,b=R3), Rdummy
StaticCall _CallChecks_sfoo(), Rdummy
Library __allocateObject(4), R0
MoveField _DV_CallChecks, R0.0
Move R0, c_main
Move c_main, R1
StaticCall __checkNullRef(a=R1), Rdummy
VirtualCall R1.0(), Rdummy
Library __exit(0), Rdummy
# End Of Method Block

_CallChecks_foo:
Move str1, R1
StaticCall __checkNullRef(a=R1), Rdummy
Library __println(R1), Rdummy
Return Rdummy
# End Of Method Block

_CallChecks_sfoo:
Move str2, R1
StaticCall __checkNullRef(a=R1), Rdummy
Library __println(R1), Rdummy
Return Rdummy
# End Of Method Block

_X_foo:
Move str3, R1
StaticCall __checkNullRef(a=R1), Rdummy
Library __println(R1), Rdummy
Return Rdummy
# End Of Method Block

_Y_foo:
Move str4, R1
StaticCall __checkNullRef(a=R1), Rdummy
Library __println(R1), Rdummy
Return Rdummy
# End Of Method Block

_Z_foo:
Move str5, R1
StaticCall __checkNullRef(a=R1), Rdummy
Library __println(R1), Rdummy
Return Rdummy
# End Of Method Block
