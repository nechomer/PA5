str_err_null_ptr_ref:		"Runtime Error: Null pointer dereference!"
str_err_arr_out_of_bounds: 	"Runtime Error: Array index out of bounds!"
str_err_neg_arr_size: 	"Runtime Error: Array allocation with negative array size!"
str_err_div_by_zero: 	"Runtime Error: Division by zero!"
str1:	": "
str2:	""
# End of constant strings section

# class WhileCheck
# Dispatch vector:
_DV_WhileCheck: []
# Field offsets

# End of dispatch table section

# Check Null Ptr Reference:
# static void checkNullRef(array a){
# 	if(a == null) {Library.println(...);
# 	Library.exit(1);
# 	}
# }
__checkNullRef:
	Move a, R0
	Compare 0, R0
	JumpTrue __checkNullRef_fault
	Return Rdummy
__checkNullRef_fault:
	Library __println(str_err_null_ptr_ref), Rdummy
	Library __exit(1), Rdummy
# End Of Method Block

# Check Array Index Out Of Bounds:
# static void checkArrayAccess(array a, index i) {
# 	if (i<0 || i>=a.length) {
# 	Library.println("Runtime Error");
# 	}
# }
__checkArrayAccess:
	Move i, R0
	Compare 0, R0
	JumpL __checkArrayAccess_fault
	ArrayLength a, R0
	Compare i, R0
	JumpLE __checkArrayAccess_fault
	Return Rdummy
__checkArrayAccess_fault:
	Library __println(str_err_arr_out_of_bounds), Rdummy
	Library __exit(1), Rdummy
# End Of Method Block

# Check Array Allocation Is Not With Negative Number:
# static void checkSize(size n) {
# 	if (n<0) Library.println("Runtime Error");
# }
__checkSize:
	Move n, R0
	Compare 0, R0
	JumpLE __checkSize_fault
	Return Rdummy
__checkSize_fault:
	Library __println(str_err_neg_arr_size), Rdummy
	Library __exit(1), Rdummy
# End Of Method Block

# Check Division By Zero:
# static void checkZero(value b) {
# 	if (b == 0) Library.println("Runtime Error");
# }
__checkZero:
	Move b, R0
	Compare 0, R0
	JumpTrue __checkZero_fault
	Return Rdummy
__checkZero_fault:
	Library __println(str_err_div_by_zero), Rdummy
	Library __exit(1), Rdummy
# End Of Method Block


__ic_main:
Move 6, R1
StaticCall __checkSize(n=R1), Rdummy
Mul 4, R1
Library __allocateArray(R1), R0
Move R0, arr_main
Move 0, R0
Move R0, i_main
_test_label_1:
Move 0, R0
Move i_main, R1
Move arr_main, R3
StaticCall __checkNullRef(a=R3), Rdummy
ArrayLength R3, R2
Compare R1, R2
JumpLE _logical_op_end_3
Move 1, R0
_logical_op_end_3:
Compare 0, R0
JumpTrue _end_label_2
Move i_main, R1
Library __printi(R1), Rdummy
Move str1, R1
StaticCall __checkNullRef(a=R1), Rdummy
Library __print(R1), Rdummy
Move arr_main, R2
StaticCall __checkNullRef(a=R2), Rdummy
Move i_main, R3
StaticCall __checkArrayAccess(a=R2,i=R3), Rdummy
MoveArray R2[R3], R1
Library __printi(R1), Rdummy
Move str2, R1
StaticCall __checkNullRef(a=R1), Rdummy
Library __println(R1), Rdummy
Move i_main, R0
Move 1, R1
Add R1, R0
Move R0, i_main
Jump _test_label_1
_end_label_2:
Move 0, R0
Move R0, i_main
_test_label_4:
Move 0, R0
Move i_main, R1
Move arr_main, R3
StaticCall __checkNullRef(a=R3), Rdummy
ArrayLength R3, R2
Compare R1, R2
JumpLE _logical_op_end_6
Move 1, R0
_logical_op_end_6:
Compare 0, R0
JumpTrue _end_label_5
Move arr_main, R1
StaticCall __checkNullRef(a=R1), Rdummy
ArrayLength R1, R0
Move i_main, R1
Sub R1, R0
Move arr_main, R1
StaticCall __checkNullRef(a=R1), Rdummy
Move i_main, R2
StaticCall __checkArrayAccess(a=R1,i=R2), Rdummy
MoveArray R0, R1[R2]
Move i_main, R0
Move 1, R1
Add R1, R0
Move R0, i_main
Jump _test_label_4
_end_label_5:
Move 0, R0
Move R0, i_main
_test_label_7:
Move 0, R0
Move i_main, R1
Move arr_main, R3
StaticCall __checkNullRef(a=R3), Rdummy
ArrayLength R3, R2
Compare R1, R2
JumpLE _logical_op_end_9
Move 1, R0
_logical_op_end_9:
Compare 0, R0
JumpTrue _end_label_8
Move i_main, R1
Library __printi(R1), Rdummy
Move str1, R1
StaticCall __checkNullRef(a=R1), Rdummy
Library __print(R1), Rdummy
Move arr_main, R2
StaticCall __checkNullRef(a=R2), Rdummy
Move i_main, R3
StaticCall __checkArrayAccess(a=R2,i=R3), Rdummy
MoveArray R2[R3], R1
Library __printi(R1), Rdummy
Move str2, R1
StaticCall __checkNullRef(a=R1), Rdummy
Library __println(R1), Rdummy
Move i_main, R0
Move 1, R1
Add R1, R0
Move R0, i_main
Jump _test_label_7
_end_label_8:
Library __exit(0), Rdummy
# End Of Method Block
