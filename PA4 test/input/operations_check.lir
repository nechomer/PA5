str_err_null_ptr_ref:		"Runtime Error: Null pointer dereference!"
str_err_arr_out_of_bounds:	"Runtime Error: Array index out of bounds!"
str_err_neg_arr_size:	"Runtime Error: Array allocation with negative array size!"
str_err_div_by_zero:	"Runtime Error: Division by zero!"
str1:	"a,b,c are :"
str2:	""

# class OperationsCheck
# Dispatch vector:
_DV_OperationsCheck: []
# Field offsets


# Check Null Ptr Reference:
# static void checkNullRef(array a){
# 	if(a == null) {Library.println(...);
# 	Library.exit(1);
# 	}
# }
__checkNullRef:
	Move a, R0
	Compare 0, R0
	JumpTrue _error1
	Return Rdummy
_error1:
	Library __println(str_err_null_ptr_ref),Rdummy
	Library __exit(1),Rdummy

# Check Array Index Out Of Bounds:
# static void checkArrayAccess(array a, index i) {
# 	if (i<0 || i>=a.length) {
# 	Library.println("Runtime Error");
# 	}
# }
__checkArrayAccess:
	Move i, R0
	Compare 0, R0
	JumpL _error2
	ArrayLength a, R0
	Compare i, R0
	JumpLE _error2	Return Rdummy
_error2:
	Library __println(str_err_arr_out_of_bounds),Rdummy
	Library __exit(1),Rdummy

# Check Array Allocation Is Not With Negative Number:
# static void checkSize(size n) {
# 	if (n<0) Library.println("Runtime Error");
# }
__checkSize:
	Move n, R0
	Compare 0, R0
	JumpLE _error3
	Return Rdummy
_error3:
	Library __println(str_err_neg_arr_size),Rdummy
	Library __exit(1),Rdummy

# Check Division By Zero:
# static void checkZero(value b) {
# 	if (b == 0) Library.println("Runtime Error");
# }
__checkZero:
	Move b, R0
	Compare 0, R0	JumpTrue _error4
	Return Rdummy
_error4:
	Library __println(str_err_div_by_zero),Rdummy
	Library __exit(1),Rdummy


_ic_main:
Move 1, R0
Move R0, a
Move 2, R0
Move R0, b
Move 0, c
Move 1, R0
Move R0, d
Move 0, R0
Move R0, e
Move 0, f
Move str1, R1
StaticCall __checkNullRef(a=R1),Rdummy
Library __println(R1), Rdummy
Move a, R1
Library __printi(R1), Rdummy
Move str2, R1
StaticCall __checkNullRef(a=R1),Rdummy
Library __println(R1), Rdummy
Move b, R1
Library __printi(R1), Rdummy
Move str2, R1
StaticCall __checkNullRef(a=R1),Rdummy
Library __println(R1), Rdummy
Move c, R1
Library __printi(R1), Rdummy
Move str2, R1
StaticCall __checkNullRef(a=R1),Rdummy
Library __println(R1), Rdummy
Move a, R0
Move b, R1
Add R1, R0
Move R0, c
Move c, R1
Library __printi(R1), Rdummy
Move str2, R1
StaticCall __checkNullRef(a=R1),Rdummy
Library __println(R1), Rdummy
Move a, R0
Move b, R1
Sub R1, R0
Move R0, c
Move c, R1
Library __printi(R1), Rdummy
Move str2, R1
StaticCall __checkNullRef(a=R1),Rdummy
Library __println(R1), Rdummy
Move a, R0
Move b, R1
Mul R1, R0
Move R0, c
Move c, R1
Library __printi(R1), Rdummy
Move str2, R1
StaticCall __checkNullRef(a=R1),Rdummy
Library __println(R1), Rdummy
Move a, R0
Move 2, R1
StaticCall __checkZero(b=R1),Rdummy
Div R1, R0
Move R0, c
Move c, R1
Library __printi(R1), Rdummy
Move str2, R1
StaticCall __checkNullRef(a=R1),Rdummy
Library __println(R1), Rdummy
Move 1, R0
Move 3, R1
Mod R1, R0
Move R0, c
Move c, R1
Library __printi(R1), Rdummy
Move str2, R1
StaticCall __checkNullRef(a=R1),Rdummy
Library __println(R1), Rdummy
Move 0, R0
Move a, R1
Move b, R2
Compare R1, R2
JumpLE _logical_op_end_1
Move 1, R0
_logical_op_end_1:
Move R0, f
Move f, R1
Library __printb(R1), Rdummy
Move str2, R1
StaticCall __checkNullRef(a=R1),Rdummy
Library __println(R1), Rdummy
Move b, R0
Neg R0
Move R0, c
Move c, R1
Library __printi(R1), Rdummy
Move str2, R1
StaticCall __checkNullRef(a=R1),Rdummy
Library __println(R1), Rdummy
Move d, R0
Compare 0, R0
JumpTrue _logical_op_end_2
Move e, R1
And R1,R0
_logical_op_end_2:
Move R0, f
Move f, R1
Library __printb(R1), Rdummy
Move str2, R1
StaticCall __checkNullRef(a=R1),Rdummy
Library __println(R1), Rdummy
Move d, R0
Compare 0, R0
JumpFalse _logical_op_end_3
Move e, R1
Or R1,R0
_logical_op_end_3:
Move R0, f
Move f, R1
Library __printb(R1), Rdummy
Move str2, R1
StaticCall __checkNullRef(a=R1),Rdummy
Library __println(R1), Rdummy
Move 0, R0
Move a, R1
Move b, R2
Compare R1, R2
JumpL _logical_op_end_4
Move 1, R0
_logical_op_end_4:
Move R0, f
Move f, R1
Library __printb(R1), Rdummy
Move str2, R1
StaticCall __checkNullRef(a=R1),Rdummy
Library __println(R1), Rdummy
Move 0, R0
Move a, R1
Move b, R2
Compare R1, R2
JumpGE _logical_op_end_5
Move 1, R0
_logical_op_end_5:
Move R0, f
Move f, R1
Library __printb(R1), Rdummy
Move str2, R1
StaticCall __checkNullRef(a=R1),Rdummy
Library __println(R1), Rdummy
Move 0, R0
Move a, R1
Move b, R2
Compare R1, R2
JumpG _logical_op_end_6
Move 1, R0
_logical_op_end_6:
Move R0, f
Move f, R1
Library __printb(R1), Rdummy
Move str2, R1
StaticCall __checkNullRef(a=R1),Rdummy
Library __println(R1), Rdummy
Move 0, R0
Move a, R1
Move b, R2
Compare R1, R2
JumpFalse _logical_op_end_7
Move 1, R0
_logical_op_end_7:
Move R0, f
Move f, R1
Library __printb(R1), Rdummy
Move str2, R1
StaticCall __checkNullRef(a=R1),Rdummy
Library __println(R1), Rdummy
Move 0, R0
Move a, R1
Move b, R2
Compare R1, R2
JumpTrue _logical_op_end_8
Move 1, R0
_logical_op_end_8:
Move R0, f
Move f, R1
Library __printb(R1), Rdummy
Move str2, R1
StaticCall __checkNullRef(a=R1),Rdummy
Library __println(R1), Rdummy
Move e, R0
Xor 1,R0
Move R0, f
Move f, R1
Library __printb(R1), Rdummy
Move str2, R1
StaticCall __checkNullRef(a=R1),Rdummy
Library __println(R1), Rdummy
Library __exit(0),Rdummy
