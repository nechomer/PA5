
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Feb 29 14:28:01 IST 2012
//----------------------------------------------------

package IC.Parser;

import java.util.List;
import java.util.LinkedList;
import IC.AST.*;
import IC.Parser.SyntaxError;
import IC.Parser.Token;
import IC.Parser.Lexer;
import java_cup.runtime.*;
import IC.Parser.ValuedToken;
import IC.DataTypes;
import IC.ICVoid;
import IC.LiteralTypes;
import IC.UnaryOps;
import IC.BinaryOps;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Feb 29 14:28:01 IST 2012
  */
public @SuppressWarnings(value={"all"}) class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\004\011\000\002\004\007" +
    "\000\002\005\004\000\002\005\004\000\002\005\002\000" +
    "\002\006\005\000\002\007\003\000\002\007\005\000\002" +
    "\010\013\000\002\010\012\000\002\010\013\000\002\010" +
    "\012\000\002\012\003\000\002\012\005\000\002\012\002" +
    "\000\002\013\004\000\002\015\004\000\002\015\002\000" +
    "\002\014\003\000\002\014\005\000\002\036\005\000\002" +
    "\036\004\000\002\036\004\000\002\036\004\000\002\036" +
    "\004\000\002\036\005\000\002\036\007\000\002\036\006" +
    "\000\002\036\007\000\002\036\007\000\002\036\011\000" +
    "\002\016\005\000\002\016\003\000\002\025\005\000\002" +
    "\025\003\000\002\026\005\000\002\026\005\000\002\026" +
    "\003\000\002\027\005\000\002\027\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\031\005\000\002\031\005\000\002\031\003\000\002" +
    "\032\005\000\002\032\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\034\004\000\002\034\004" +
    "\000\002\034\003\000\002\035\005\000\002\035\003\000" +
    "\002\035\005\000\002\035\007\000\002\035\006\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\020" +
    "\003\000\002\020\003\000\002\024\003\000\002\024\005" +
    "\000\002\024\006\000\002\022\010\000\002\021\006\000" +
    "\002\021\010\000\002\023\002\000\002\023\005\000\002" +
    "\023\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\004\011\006\001\002\000\004\002\273\001" +
    "\002\000\006\002\uffff\011\uffff\001\002\000\004\062\011" +
    "\001\002\000\006\002\001\011\006\001\002\000\006\002" +
    "\ufffe\011\ufffe\001\002\000\006\017\012\034\013\001\002" +
    "\000\004\062\267\001\002\000\020\007\ufff9\037\ufff9\046" +
    "\ufff9\051\ufff9\052\ufff9\055\ufff9\062\ufff9\001\002\000\020" +
    "\007\020\037\016\046\025\051\017\052\024\055\021\062" +
    "\023\001\002\000\020\007\ufffa\037\ufffa\046\ufffa\051\ufffa" +
    "\052\ufffa\055\ufffa\062\ufffa\001\002\000\006\035\uffae\061" +
    "\uffae\001\002\000\014\007\020\037\016\052\024\055\250" +
    "\062\023\001\002\000\006\035\uffad\061\uffad\001\002\000" +
    "\004\061\240\001\002\000\020\007\ufffb\037\ufffb\046\ufffb" +
    "\051\ufffb\052\ufffb\055\ufffb\062\ufffb\001\002\000\006\035" +
    "\uffab\061\uffab\001\002\000\006\035\uffac\061\uffac\001\002" +
    "\000\006\002\ufffc\011\ufffc\001\002\000\006\035\031\061" +
    "\027\001\002\000\010\004\036\012\ufff7\050\ufff7\001\002" +
    "\000\006\012\033\050\034\001\002\000\004\045\032\001" +
    "\002\000\006\035\uffaa\061\uffaa\001\002\000\004\061\035" +
    "\001\002\000\020\007\ufff8\037\ufff8\046\ufff8\051\ufff8\052" +
    "\ufff8\055\ufff8\062\ufff8\001\002\000\006\012\ufff6\050\ufff6" +
    "\001\002\000\016\005\uffef\007\020\012\uffef\037\016\052" +
    "\024\062\023\001\002\000\006\005\ufff1\012\ufff1\001\002" +
    "\000\006\035\031\061\237\001\002\000\006\005\043\012" +
    "\042\001\002\000\012\007\020\037\016\052\024\062\023" +
    "\001\002\000\004\034\044\001\002\000\052\004\uffec\007" +
    "\uffec\010\uffec\013\uffec\021\uffec\032\uffec\034\uffec\037\uffec" +
    "\040\uffec\043\uffec\046\uffec\047\uffec\052\uffec\053\uffec\054" +
    "\uffec\056\uffec\057\uffec\060\uffec\061\uffec\062\uffec\001\002" +
    "\000\052\004\051\007\020\010\065\013\047\021\066\032" +
    "\070\034\050\037\016\040\061\043\074\046\077\047\054" +
    "\052\024\053\063\054\057\056\053\057\064\060\071\061" +
    "\062\062\073\001\002\000\010\006\233\015\uffbf\035\uffbf" +
    "\001\002\000\004\050\232\001\002\000\052\004\uffec\007" +
    "\uffec\010\uffec\013\uffec\021\uffec\032\uffec\034\uffec\037\uffec" +
    "\040\uffec\043\uffec\046\uffec\047\uffec\052\uffec\053\uffec\054" +
    "\uffec\056\uffec\057\uffec\060\uffec\061\uffec\062\uffec\001\002" +
    "\000\032\004\051\021\066\025\115\031\113\032\070\043" +
    "\074\053\063\054\057\057\064\060\071\061\062\062\117" +
    "\001\002\000\006\035\031\061\224\001\002\000\004\004" +
    "\220\001\002\000\034\004\051\021\066\025\115\031\113" +
    "\032\070\043\074\050\215\053\063\054\057\057\064\060" +
    "\071\061\062\062\117\001\002\000\050\005\uffbd\012\uffbd" +
    "\014\uffbd\015\uffbd\016\uffbd\022\uffbd\023\uffbd\024\uffbd\025" +
    "\uffbd\026\uffbd\027\uffbd\030\uffbd\035\uffbd\036\uffbd\041\uffbd" +
    "\042\uffbd\044\uffbd\045\uffbd\050\uffbd\001\002\000\006\015" +
    "\141\035\140\001\002\000\050\005\uffb3\012\uffb3\014\uffb3" +
    "\015\uffb3\016\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026" +
    "\uffb3\027\uffb3\030\uffb3\035\uffb3\036\uffb3\041\uffb3\042\uffb3" +
    "\044\uffb3\045\uffb3\050\uffb3\001\002\000\050\005\uffbe\012" +
    "\uffbe\014\uffbe\015\uffbe\016\uffbe\022\uffbe\023\uffbe\024\uffbe" +
    "\025\uffbe\026\uffbe\027\uffbe\030\uffbe\035\uffbe\036\uffbe\041" +
    "\uffbe\042\uffbe\044\uffbe\045\uffbe\050\uffbe\001\002\000\004" +
    "\004\202\001\002\000\054\004\177\005\uffbc\006\uffbc\012" +
    "\uffbc\014\uffbc\015\uffbc\016\uffbc\022\uffbc\023\uffbc\024\uffbc" +
    "\025\uffbc\026\uffbc\027\uffbc\030\uffbc\035\uffbc\036\uffbc\041" +
    "\uffbc\042\uffbc\044\uffbc\045\uffbc\050\uffbc\001\002\000\050" +
    "\005\uffc1\012\uffc1\014\uffc1\015\uffc1\016\uffc1\022\uffc1\023" +
    "\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\035\uffc1" +
    "\036\uffc1\041\uffc1\042\uffc1\044\uffc1\045\uffc1\050\uffc1\001" +
    "\002\000\050\005\uffb0\012\uffb0\014\uffb0\015\uffb0\016\uffb0" +
    "\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030" +
    "\uffb0\035\uffb0\036\uffb0\041\uffb0\042\uffb0\044\uffb0\045\uffb0" +
    "\050\uffb0\001\002\000\004\050\176\001\002\000\050\005" +
    "\uffb2\012\uffb2\014\uffb2\015\uffb2\016\uffb2\022\uffb2\023\uffb2" +
    "\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\035\uffb2\036" +
    "\uffb2\041\uffb2\042\uffb2\044\uffb2\045\uffb2\050\uffb2\001\002" +
    "\000\050\005\uffc5\012\uffc5\014\uffc5\015\uffc5\016\uffc5\022" +
    "\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5" +
    "\035\uffc5\036\uffc5\041\uffc5\042\uffc5\044\uffc5\045\uffc5\050" +
    "\uffc5\001\002\000\012\007\020\037\016\052\024\062\167" +
    "\001\002\000\050\005\uffaf\012\uffaf\014\uffaf\015\uffaf\016" +
    "\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf" +
    "\030\uffaf\035\uffaf\036\uffaf\041\uffaf\042\uffaf\044\uffaf\045" +
    "\uffaf\050\uffaf\001\002\000\010\015\uffc0\035\uffc0\050\166" +
    "\001\002\000\010\015\100\035\uffab\061\uffab\001\002\000" +
    "\050\005\uffb1\012\uffb1\014\uffb1\015\uffb1\016\uffb1\022\uffb1" +
    "\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\035" +
    "\uffb1\036\uffb1\041\uffb1\042\uffb1\044\uffb1\045\uffb1\050\uffb1" +
    "\001\002\000\052\004\uffed\007\uffed\010\uffed\013\uffed\021" +
    "\uffed\032\uffed\034\uffed\037\uffed\040\uffed\043\uffed\046\uffed" +
    "\047\uffed\052\uffed\053\uffed\054\uffed\056\uffed\057\uffed\060" +
    "\uffed\061\uffed\062\uffed\001\002\000\052\004\uffeb\007\uffeb" +
    "\010\uffeb\013\uffeb\021\uffeb\032\uffeb\034\uffeb\037\uffeb\040" +
    "\uffeb\043\uffeb\046\uffeb\047\uffeb\052\uffeb\053\uffeb\054\uffeb" +
    "\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\001\002\000" +
    "\020\007\ufff4\037\ufff4\046\ufff4\051\ufff4\052\ufff4\055\ufff4" +
    "\062\ufff4\001\002\000\004\061\101\001\002\000\004\004" +
    "\102\001\002\000\036\004\051\005\uffb6\012\uffb6\021\066" +
    "\025\115\031\113\032\070\043\074\053\063\054\057\057" +
    "\064\060\071\061\062\062\117\001\002\000\050\005\uffbf" +
    "\012\uffbf\014\uffbf\015\uffbf\016\uffbf\022\uffbf\023\uffbf\024" +
    "\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\035\uffbf\036\uffbf" +
    "\041\uffbf\042\uffbf\044\uffbf\045\uffbf\050\uffbf\001\002\000" +
    "\022\005\uffd8\012\uffd8\016\uffd8\030\uffd8\036\uffd8\042\uffd8" +
    "\045\uffd8\050\uffd8\001\002\000\044\005\uffcd\012\uffcd\014" +
    "\uffcd\016\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd" +
    "\027\uffcd\030\uffcd\036\uffcd\041\uffcd\042\uffcd\044\uffcd\045" +
    "\uffcd\050\uffcd\001\002\000\036\005\uffd6\012\uffd6\016\uffd6" +
    "\022\156\023\155\025\161\026\157\027\154\030\uffd6\036" +
    "\uffd6\042\uffd6\044\160\045\uffd6\050\uffd6\001\002\000\006" +
    "\005\153\012\146\001\002\000\016\005\uffdd\012\uffdd\030" +
    "\uffdd\036\136\045\uffdd\050\uffdd\001\002\000\050\005\uffc7" +
    "\012\uffc7\014\uffc7\015\141\016\uffc7\022\uffc7\023\uffc7\024" +
    "\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\035\140\036\uffc7" +
    "\041\uffc7\042\uffc7\044\uffc7\045\uffc7\050\uffc7\001\002\000" +
    "\010\005\uffb4\012\uffb4\030\134\001\002\000\032\004\051" +
    "\021\066\025\115\031\113\032\070\043\074\053\063\054" +
    "\057\057\064\060\071\061\062\062\117\001\002\000\044" +
    "\005\uffcf\012\uffcf\014\130\016\uffcf\022\uffcf\023\uffcf\024" +
    "\126\025\uffcf\026\uffcf\027\uffcf\030\uffcf\036\uffcf\041\131" +
    "\042\uffcf\044\uffcf\045\uffcf\050\uffcf\001\002\000\032\004" +
    "\051\021\066\025\115\031\113\032\070\043\074\053\063" +
    "\054\057\057\064\060\071\061\062\062\117\001\002\000" +
    "\022\005\uffdb\012\uffdb\016\121\030\uffdb\036\uffdb\042\122" +
    "\045\uffdb\050\uffdb\001\002\000\004\015\100\001\002\000" +
    "\050\005\uffc0\012\uffc0\014\uffc0\015\uffc0\016\uffc0\022\uffc0" +
    "\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\035" +
    "\uffc0\036\uffc0\041\uffc0\042\uffc0\044\uffc0\045\uffc0\050\uffc0" +
    "\001\002\000\032\004\051\021\066\025\115\031\113\032" +
    "\070\043\074\053\063\054\057\057\064\060\071\061\062" +
    "\062\117\001\002\000\032\004\051\021\066\025\115\031" +
    "\113\032\070\043\074\053\063\054\057\057\064\060\071" +
    "\061\062\062\117\001\002\000\022\005\uffd9\012\uffd9\016" +
    "\uffd9\030\uffd9\036\uffd9\042\uffd9\045\uffd9\050\uffd9\001\002" +
    "\000\022\005\uffda\012\uffda\016\uffda\030\uffda\036\uffda\042" +
    "\uffda\045\uffda\050\uffda\001\002\000\044\005\uffc9\012\uffc9" +
    "\014\uffc9\016\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026" +
    "\uffc9\027\uffc9\030\uffc9\036\uffc9\041\uffc9\042\uffc9\044\uffc9" +
    "\045\uffc9\050\uffc9\001\002\000\032\004\uffca\021\uffca\025" +
    "\uffca\031\uffca\032\uffca\043\uffca\053\uffca\054\uffca\057\uffca" +
    "\060\uffca\061\uffca\062\uffca\001\002\000\032\004\051\021" +
    "\066\025\115\031\113\032\070\043\074\053\063\054\057" +
    "\057\064\060\071\061\062\062\117\001\002\000\032\004" +
    "\uffcb\021\uffcb\025\uffcb\031\uffcb\032\uffcb\043\uffcb\053\uffcb" +
    "\054\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\001\002\000" +
    "\032\004\uffcc\021\uffcc\025\uffcc\031\uffcc\032\uffcc\043\uffcc" +
    "\053\uffcc\054\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\001" +
    "\002\000\044\005\uffce\012\uffce\014\uffce\016\uffce\022\uffce" +
    "\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\036" +
    "\uffce\041\uffce\042\uffce\044\uffce\045\uffce\050\uffce\001\002" +
    "\000\044\005\uffc8\012\uffc8\014\uffc8\016\uffc8\022\uffc8\023" +
    "\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\036\uffc8" +
    "\041\uffc8\042\uffc8\044\uffc8\045\uffc8\050\uffc8\001\002\000" +
    "\032\004\051\021\066\025\115\031\113\032\070\043\074" +
    "\053\063\054\057\057\064\060\071\061\062\062\117\001" +
    "\002\000\016\005\uffde\012\uffde\030\uffde\036\136\045\uffde" +
    "\050\uffde\001\002\000\032\004\051\021\066\025\115\031" +
    "\113\032\070\043\074\053\063\054\057\057\064\060\071" +
    "\061\062\062\117\001\002\000\022\005\uffdc\012\uffdc\016" +
    "\121\030\uffdc\036\uffdc\042\122\045\uffdc\050\uffdc\001\002" +
    "\000\032\004\051\021\066\025\115\031\113\032\070\043" +
    "\074\053\063\054\057\057\064\060\071\061\062\062\117" +
    "\001\002\000\006\033\143\061\142\001\002\000\054\004" +
    "\144\005\uffbb\006\uffbb\012\uffbb\014\uffbb\015\uffbb\016\uffbb" +
    "\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030" +
    "\uffbb\035\uffbb\036\uffbb\041\uffbb\042\uffbb\044\uffbb\045\uffbb" +
    "\050\uffbb\001\002\000\050\005\uffc4\012\uffc4\014\uffc4\015" +
    "\uffc4\016\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4" +
    "\027\uffc4\030\uffc4\035\uffc4\036\uffc4\041\uffc4\042\uffc4\044" +
    "\uffc4\045\uffc4\050\uffc4\001\002\000\036\004\051\005\uffb6" +
    "\012\uffb6\021\066\025\115\031\113\032\070\043\074\053" +
    "\063\054\057\057\064\060\071\061\062\062\117\001\002" +
    "\000\006\005\147\012\146\001\002\000\032\004\051\021" +
    "\066\025\115\031\113\032\070\043\074\053\063\054\057" +
    "\057\064\060\071\061\062\062\117\001\002\000\050\005" +
    "\uffb7\012\uffb7\014\uffb7\015\uffb7\016\uffb7\022\uffb7\023\uffb7" +
    "\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\035\uffb7\036" +
    "\uffb7\041\uffb7\042\uffb7\044\uffb7\045\uffb7\050\uffb7\001\002" +
    "\000\010\005\uffb5\012\uffb5\030\134\001\002\000\006\030" +
    "\134\045\152\001\002\000\052\005\uffba\006\uffba\012\uffba" +
    "\014\uffba\015\uffba\016\uffba\022\uffba\023\uffba\024\uffba\025" +
    "\uffba\026\uffba\027\uffba\030\uffba\035\uffba\036\uffba\041\uffba" +
    "\042\uffba\044\uffba\045\uffba\050\uffba\001\002\000\050\005" +
    "\uffb9\012\uffb9\014\uffb9\015\uffb9\016\uffb9\022\uffb9\023\uffb9" +
    "\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\035\uffb9\036" +
    "\uffb9\041\uffb9\042\uffb9\044\uffb9\045\uffb9\050\uffb9\001\002" +
    "\000\032\004\uffd5\021\uffd5\025\uffd5\031\uffd5\032\uffd5\043" +
    "\uffd5\053\uffd5\054\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5" +
    "\001\002\000\032\004\uffd2\021\uffd2\025\uffd2\031\uffd2\032" +
    "\uffd2\043\uffd2\053\uffd2\054\uffd2\057\uffd2\060\uffd2\061\uffd2" +
    "\062\uffd2\001\002\000\032\004\uffd3\021\uffd3\025\uffd3\031" +
    "\uffd3\032\uffd3\043\uffd3\053\uffd3\054\uffd3\057\uffd3\060\uffd3" +
    "\061\uffd3\062\uffd3\001\002\000\032\004\uffd4\021\uffd4\025" +
    "\uffd4\031\uffd4\032\uffd4\043\uffd4\053\uffd4\054\uffd4\057\uffd4" +
    "\060\uffd4\061\uffd4\062\uffd4\001\002\000\032\004\051\021" +
    "\066\025\115\031\113\032\070\043\074\053\063\054\057" +
    "\057\064\060\071\061\062\062\117\001\002\000\032\004" +
    "\051\021\066\025\115\031\113\032\070\043\074\053\063" +
    "\054\057\057\064\060\071\061\062\062\117\001\002\000" +
    "\032\004\051\021\066\025\115\031\113\032\070\043\074" +
    "\053\063\054\057\057\064\060\071\061\062\062\117\001" +
    "\002\000\026\005\uffd7\012\uffd7\016\uffd7\025\161\030\uffd7" +
    "\036\uffd7\042\uffd7\044\160\045\uffd7\050\uffd7\001\002\000" +
    "\044\005\uffd0\012\uffd0\014\130\016\uffd0\022\uffd0\023\uffd0" +
    "\024\126\025\uffd0\026\uffd0\027\uffd0\030\uffd0\036\uffd0\041" +
    "\131\042\uffd0\044\uffd0\045\uffd0\050\uffd0\001\002\000\044" +
    "\005\uffd1\012\uffd1\014\130\016\uffd1\022\uffd1\023\uffd1\024" +
    "\126\025\uffd1\026\uffd1\027\uffd1\030\uffd1\036\uffd1\041\131" +
    "\042\uffd1\044\uffd1\045\uffd1\050\uffd1\001\002\000\054\004" +
    "\uffe7\007\uffe7\010\uffe7\013\uffe7\020\uffe7\021\uffe7\032\uffe7" +
    "\034\uffe7\037\uffe7\040\uffe7\043\uffe7\046\uffe7\047\uffe7\052" +
    "\uffe7\053\uffe7\054\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7" +
    "\062\uffe7\001\002\000\006\004\174\035\uffab\001\002\000" +
    "\004\035\171\001\002\000\034\004\051\021\066\025\115" +
    "\031\113\032\070\043\074\045\032\053\063\054\057\057" +
    "\064\060\071\061\062\062\117\001\002\000\006\030\134" +
    "\045\173\001\002\000\050\005\uffc3\012\uffc3\014\uffc3\015" +
    "\uffc3\016\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3" +
    "\027\uffc3\030\uffc3\035\uffc3\036\uffc3\041\uffc3\042\uffc3\044" +
    "\uffc3\045\uffc3\050\uffc3\001\002\000\004\005\175\001\002" +
    "\000\050\005\uffc2\012\uffc2\014\uffc2\015\uffc2\016\uffc2\022" +
    "\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2" +
    "\035\uffc2\036\uffc2\041\uffc2\042\uffc2\044\uffc2\045\uffc2\050" +
    "\uffc2\001\002\000\054\004\uffe6\007\uffe6\010\uffe6\013\uffe6" +
    "\020\uffe6\021\uffe6\032\uffe6\034\uffe6\037\uffe6\040\uffe6\043" +
    "\uffe6\046\uffe6\047\uffe6\052\uffe6\053\uffe6\054\uffe6\056\uffe6" +
    "\057\uffe6\060\uffe6\061\uffe6\062\uffe6\001\002\000\036\004" +
    "\051\005\uffb6\012\uffb6\021\066\025\115\031\113\032\070" +
    "\043\074\053\063\054\057\057\064\060\071\061\062\062" +
    "\117\001\002\000\006\005\201\012\146\001\002\000\050" +
    "\005\uffb8\012\uffb8\014\uffb8\015\uffb8\016\uffb8\022\uffb8\023" +
    "\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\035\uffb8" +
    "\036\uffb8\041\uffb8\042\uffb8\044\uffb8\045\uffb8\050\uffb8\001" +
    "\002\000\032\004\051\021\066\025\115\031\113\032\070" +
    "\043\074\053\063\054\057\057\064\060\071\061\062\062" +
    "\117\001\002\000\006\005\204\030\134\001\002\000\050" +
    "\004\051\007\020\010\065\013\047\021\066\032\070\034" +
    "\050\037\016\040\061\043\074\047\054\052\024\053\063" +
    "\054\057\056\053\057\064\060\071\061\062\062\073\001" +
    "\002\000\006\035\031\061\211\001\002\000\054\004\uffe0" +
    "\007\uffe0\010\uffe0\013\uffe0\020\207\021\uffe0\032\uffe0\034" +
    "\uffe0\037\uffe0\040\uffe0\043\uffe0\046\uffe0\047\uffe0\052\uffe0" +
    "\053\uffe0\054\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062" +
    "\uffe0\001\002\000\050\004\051\007\020\010\065\013\047" +
    "\021\066\032\070\034\050\037\016\040\061\043\074\047" +
    "\054\052\024\053\063\054\057\056\053\057\064\060\071" +
    "\061\062\062\073\001\002\000\054\004\uffdf\007\uffdf\010" +
    "\uffdf\013\uffdf\020\uffdf\021\uffdf\032\uffdf\034\uffdf\037\uffdf" +
    "\040\uffdf\043\uffdf\046\uffdf\047\uffdf\052\uffdf\053\uffdf\054" +
    "\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf\001\002" +
    "\000\004\006\212\001\002\000\032\004\051\021\066\025" +
    "\115\031\113\032\070\043\074\053\063\054\057\057\064" +
    "\060\071\061\062\062\117\001\002\000\006\030\134\050" +
    "\214\001\002\000\054\004\uffe3\007\uffe3\010\uffe3\013\uffe3" +
    "\020\uffe3\021\uffe3\032\uffe3\034\uffe3\037\uffe3\040\uffe3\043" +
    "\uffe3\046\uffe3\047\uffe3\052\uffe3\053\uffe3\054\uffe3\056\uffe3" +
    "\057\uffe3\060\uffe3\061\uffe3\062\uffe3\001\002\000\054\004" +
    "\uffe8\007\uffe8\010\uffe8\013\uffe8\020\uffe8\021\uffe8\032\uffe8" +
    "\034\uffe8\037\uffe8\040\uffe8\043\uffe8\046\uffe8\047\uffe8\052" +
    "\uffe8\053\uffe8\054\uffe8\056\uffe8\057\uffe8\060\uffe8\061\uffe8" +
    "\062\uffe8\001\002\000\006\030\134\050\217\001\002\000" +
    "\054\004\uffe9\007\uffe9\010\uffe9\013\uffe9\020\uffe9\021\uffe9" +
    "\032\uffe9\034\uffe9\037\uffe9\040\uffe9\043\uffe9\046\uffe9\047" +
    "\uffe9\052\uffe9\053\uffe9\054\uffe9\056\uffe9\057\uffe9\060\uffe9" +
    "\061\uffe9\062\uffe9\001\002\000\032\004\051\021\066\025" +
    "\115\031\113\032\070\043\074\053\063\054\057\057\064" +
    "\060\071\061\062\062\117\001\002\000\006\005\222\030" +
    "\134\001\002\000\050\004\051\007\020\010\065\013\047" +
    "\021\066\032\070\034\050\037\016\040\061\043\074\047" +
    "\054\052\024\053\063\054\057\056\053\057\064\060\071" +
    "\061\062\062\073\001\002\000\054\004\uffe1\007\uffe1\010" +
    "\uffe1\013\uffe1\020\uffe1\021\uffe1\032\uffe1\034\uffe1\037\uffe1" +
    "\040\uffe1\043\uffe1\046\uffe1\047\uffe1\052\uffe1\053\uffe1\054" +
    "\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1\001\002" +
    "\000\006\006\212\050\225\001\002\000\052\004\uffea\007" +
    "\uffea\010\uffea\013\uffea\021\uffea\032\uffea\034\uffea\037\uffea" +
    "\040\uffea\043\uffea\046\uffea\047\uffea\052\uffea\053\uffea\054" +
    "\uffea\056\uffea\057\uffea\060\uffea\061\uffea\062\uffea\001\002" +
    "\000\006\005\227\030\134\001\002\000\050\005\uffc6\012" +
    "\uffc6\014\uffc6\015\uffc6\016\uffc6\022\uffc6\023\uffc6\024\uffc6" +
    "\025\uffc6\026\uffc6\027\uffc6\030\uffc6\035\uffc6\036\uffc6\041" +
    "\uffc6\042\uffc6\044\uffc6\045\uffc6\050\uffc6\001\002\000\052" +
    "\004\051\007\020\010\065\013\047\021\066\032\070\034" +
    "\050\037\016\040\061\043\074\046\231\047\054\052\024" +
    "\053\063\054\057\056\053\057\064\060\071\061\062\062" +
    "\073\001\002\000\054\004\uffe4\007\uffe4\010\uffe4\013\uffe4" +
    "\020\uffe4\021\uffe4\032\uffe4\034\uffe4\037\uffe4\040\uffe4\043" +
    "\uffe4\046\uffe4\047\uffe4\052\uffe4\053\uffe4\054\uffe4\056\uffe4" +
    "\057\uffe4\060\uffe4\061\uffe4\062\uffe4\001\002\000\054\004" +
    "\uffe5\007\uffe5\010\uffe5\013\uffe5\020\uffe5\021\uffe5\032\uffe5" +
    "\034\uffe5\037\uffe5\040\uffe5\043\uffe5\046\uffe5\047\uffe5\052" +
    "\uffe5\053\uffe5\054\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5" +
    "\062\uffe5\001\002\000\032\004\051\021\066\025\115\031" +
    "\113\032\070\043\074\053\063\054\057\057\064\060\071" +
    "\061\062\062\117\001\002\000\006\030\134\050\235\001" +
    "\002\000\054\004\uffe2\007\uffe2\010\uffe2\013\uffe2\020\uffe2" +
    "\021\uffe2\032\uffe2\034\uffe2\037\uffe2\040\uffe2\043\uffe2\046" +
    "\uffe2\047\uffe2\052\uffe2\053\uffe2\054\uffe2\056\uffe2\057\uffe2" +
    "\060\uffe2\061\uffe2\062\uffe2\001\002\000\006\005\ufff0\012" +
    "\ufff0\001\002\000\006\005\uffee\012\uffee\001\002\000\004" +
    "\004\241\001\002\000\016\005\uffef\007\020\012\uffef\037" +
    "\016\052\024\062\023\001\002\000\006\005\243\012\042" +
    "\001\002\000\004\034\244\001\002\000\052\004\uffec\007" +
    "\uffec\010\uffec\013\uffec\021\uffec\032\uffec\034\uffec\037\uffec" +
    "\040\uffec\043\uffec\046\uffec\047\uffec\052\uffec\053\uffec\054" +
    "\uffec\056\uffec\057\uffec\060\uffec\061\uffec\062\uffec\001\002" +
    "\000\052\004\051\007\020\010\065\013\047\021\066\032" +
    "\070\034\050\037\016\040\061\043\074\046\246\047\054" +
    "\052\024\053\063\054\057\056\053\057\064\060\071\061" +
    "\062\062\073\001\002\000\020\007\ufff2\037\ufff2\046\ufff2" +
    "\051\ufff2\052\ufff2\055\ufff2\062\ufff2\001\002\000\006\035" +
    "\031\061\260\001\002\000\004\061\251\001\002\000\004" +
    "\004\252\001\002\000\016\005\uffef\007\020\012\uffef\037" +
    "\016\052\024\062\023\001\002\000\006\005\254\012\042" +
    "\001\002\000\004\034\255\001\002\000\052\004\uffec\007" +
    "\uffec\010\uffec\013\uffec\021\uffec\032\uffec\034\uffec\037\uffec" +
    "\040\uffec\043\uffec\046\uffec\047\uffec\052\uffec\053\uffec\054" +
    "\uffec\056\uffec\057\uffec\060\uffec\061\uffec\062\uffec\001\002" +
    "\000\052\004\051\007\020\010\065\013\047\021\066\032" +
    "\070\034\050\037\016\040\061\043\074\046\257\047\054" +
    "\052\024\053\063\054\057\056\053\057\064\060\071\061" +
    "\062\062\073\001\002\000\020\007\ufff3\037\ufff3\046\ufff3" +
    "\051\ufff3\052\ufff3\055\ufff3\062\ufff3\001\002\000\004\004" +
    "\261\001\002\000\016\005\uffef\007\020\012\uffef\037\016" +
    "\052\024\062\023\001\002\000\006\005\263\012\042\001" +
    "\002\000\004\034\264\001\002\000\052\004\uffec\007\uffec" +
    "\010\uffec\013\uffec\021\uffec\032\uffec\034\uffec\037\uffec\040" +
    "\uffec\043\uffec\046\uffec\047\uffec\052\uffec\053\uffec\054\uffec" +
    "\056\uffec\057\uffec\060\uffec\061\uffec\062\uffec\001\002\000" +
    "\052\004\051\007\020\010\065\013\047\021\066\032\070" +
    "\034\050\037\016\040\061\043\074\046\266\047\054\052" +
    "\024\053\063\054\057\056\053\057\064\060\071\061\062" +
    "\062\073\001\002\000\020\007\ufff5\037\ufff5\046\ufff5\051" +
    "\ufff5\052\ufff5\055\ufff5\062\ufff5\001\002\000\004\034\270" +
    "\001\002\000\020\007\ufff9\037\ufff9\046\ufff9\051\ufff9\052" +
    "\ufff9\055\ufff9\062\ufff9\001\002\000\020\007\020\037\016" +
    "\046\272\051\017\052\024\055\021\062\023\001\002\000" +
    "\006\002\ufffd\011\ufffd\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\010\002\003\003\006\004\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\013\001\001\000\010\006\021" +
    "\010\014\011\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\246\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\037\012\040\013\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\037" +
    "\013\235\001\001\000\002\001\001\000\004\015\044\001" +
    "\001\000\024\011\051\014\074\017\066\020\071\021\054" +
    "\022\057\024\045\035\055\036\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\227\001\001\000\034" +
    "\016\225\017\066\020\117\021\054\022\057\024\102\025" +
    "\107\026\115\027\103\031\105\032\113\034\104\035\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\016" +
    "\215\017\066\020\117\021\054\022\057\024\102\025\107" +
    "\026\115\027\103\031\105\032\113\034\104\035\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\167\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\016\111" +
    "\017\066\020\117\021\054\022\057\023\106\024\102\025" +
    "\107\026\115\027\103\031\105\032\113\034\104\035\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\161\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\017" +
    "\066\020\117\021\054\022\057\024\102\034\132\035\110" +
    "\001\001\000\004\033\126\001\001\000\020\017\066\020" +
    "\117\021\054\022\057\024\102\034\124\035\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\017\066\020\117\021\054\022\057\024\102\027\123" +
    "\031\105\032\113\034\104\035\110\001\001\000\026\017" +
    "\066\020\117\021\054\022\057\024\102\027\122\031\105" +
    "\032\113\034\104\035\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\017\066\020\117\021\054\022\057\024\102\034\131\035" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\017\066\020\117\021" +
    "\054\022\057\024\102\025\134\026\115\027\103\031\105" +
    "\032\113\034\104\035\110\001\001\000\002\001\001\000" +
    "\030\017\066\020\117\021\054\022\057\024\102\026\136" +
    "\027\103\031\105\032\113\034\104\035\110\001\001\000" +
    "\002\001\001\000\034\016\150\017\066\020\117\021\054" +
    "\022\057\024\102\025\107\026\115\027\103\031\105\032" +
    "\113\034\104\035\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\016\111\017\066\020" +
    "\117\021\054\022\057\023\144\024\102\025\107\026\115" +
    "\027\103\031\105\032\113\034\104\035\110\001\001\000" +
    "\002\001\001\000\034\016\147\017\066\020\117\021\054" +
    "\022\057\024\102\025\107\026\115\027\103\031\105\032" +
    "\113\034\104\035\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\017\066\020\117\021\054\022" +
    "\057\024\102\032\164\034\104\035\110\001\001\000\022" +
    "\017\066\020\117\021\054\022\057\024\102\032\163\034" +
    "\104\035\110\001\001\000\024\017\066\020\117\021\054" +
    "\022\057\024\102\031\162\032\113\034\104\035\110\001" +
    "\001\000\002\001\001\000\004\033\126\001\001\000\004" +
    "\033\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\016\171\017\066\020\117\021\054" +
    "\022\057\024\102\025\107\026\115\027\103\031\105\032" +
    "\113\034\104\035\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\016\111\017\066\020\117\021\054\022\057" +
    "\023\177\024\102\025\107\026\115\027\103\031\105\032" +
    "\113\034\104\035\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\016\202\017\066\020\117\021\054\022" +
    "\057\024\102\025\107\026\115\027\103\031\105\032\113" +
    "\034\104\035\110\001\001\000\002\001\001\000\022\011" +
    "\204\017\066\020\071\021\054\022\057\024\045\035\055" +
    "\036\205\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\011\204\017\066\020\071\021\054\022\057\024\045" +
    "\035\055\036\207\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\016\212\017\066\020\117\021\054\022\057" +
    "\024\102\025\107\026\115\027\103\031\105\032\113\034" +
    "\104\035\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\016\220\017\066\020\117\021\054\022\057\024\102" +
    "\025\107\026\115\027\103\031\105\032\113\034\104\035" +
    "\110\001\001\000\002\001\001\000\022\011\204\017\066" +
    "\020\071\021\054\022\057\024\045\035\055\036\222\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\011\051\014" +
    "\074\017\066\020\071\021\054\022\057\024\045\035\055" +
    "\036\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\016\233\017\066\020\117\021\054\022\057\024\102" +
    "\025\107\026\115\027\103\031\105\032\113\034\104\035" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\037\012\241\013\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\244\001\001\000\024\011\051\014" +
    "\074\017\066\020\071\021\054\022\057\024\045\035\055" +
    "\036\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\037\012\252" +
    "\013\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\255\001\001\000\024\011\051\014\074\017\066" +
    "\020\071\021\054\022\057\024\045\035\055\036\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\037" +
    "\012\261\013\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\264\001\001\000\024\011\051\014\074" +
    "\017\066\020\071\021\054\022\057\024\045\035\055\036" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\270\001\001\000\010\006\021\010\014\011\025\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	/** Causes the parsr to print every token it reads.
	 * This is useful for debugging.
	 */
	public boolean printAST;
	
	private Lexer lexer;

	public Parser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	}
	
	public int getLine() {
		return lexer.getLineNumber();
	}
	
	public void syntax_error(Symbol s) {
		Token tok = (Token) s;
		System.err.println("Line " + tok.getLine()+": Syntax error; unexpected " + tok);
	}
	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // type ::= type LB RB 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 t.incrementDimension(); RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // type ::= CLASS_ID 
            {
              Type RESULT =null;
		int cNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UserType(cNameleft, cName); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // type ::= STRING 
            {
              Type RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrimitiveType(sleft, DataTypes.STRING); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrimitiveType(bleft, DataTypes.BOOLEAN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // type ::= INT 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrimitiveType(ileft, DataTypes.INT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // literal ::= INTEGER 
            {
              Literal RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String is = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 long lval = Long.parseLong(is);
		if ( lval > ((long)1<<31) )
			throw new SyntaxError(isleft,"Integer value exceeds integer range");
		RESULT = new Literal(isleft, LiteralTypes.INTEGER, (int)lval); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // literal ::= QUOTE 
            {
              Literal RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Literal(sleft, LiteralTypes.STRING, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // literal ::= NULL 
            {
              Literal RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Literal(nleft, LiteralTypes.NULL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // literal ::= FALSE 
            {
              Literal RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Literal(fleft, LiteralTypes.FALSE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // literal ::= TRUE 
            {
              Literal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Literal(tleft, LiteralTypes.TRUE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // actualParamList ::= exp 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<Expression> pl = new LinkedList<>();
		pl.add(e); RESULT = pl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actualParamList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // actualParamList ::= actualParamList COMMA exp 
            {
              List<Expression> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expression> pl = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pl.add(e); RESULT = pl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actualParamList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // actualParamList ::= 
            {
              List<Expression> RESULT =null;
		 RESULT = new LinkedList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actualParamList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // virtualCall ::= expLiteral DOT ID LP actualParamList RP 
            {
              VirtualCall RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int mNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int mNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String mName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> pl = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VirtualCall( mNameleft, e, mName, pl ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("virtualCall",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // virtualCall ::= ID LP actualParamList RP 
            {
              VirtualCall RESULT =null;
		int mNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int mNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String mName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> pl = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VirtualCall( mNameleft, mName, pl ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("virtualCall",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // staticCall ::= CLASS_ID DOT ID LP actualParamList RP 
            {
              StaticCall RESULT =null;
		int cNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String cName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int mNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int mNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String mName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> pl = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StaticCall( mNameleft, cName, mName, pl ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("staticCall",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // location ::= expLiteral LB exp RB 
            {
              Location RESULT =null;
		int arrExpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int arrExpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression arrExp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int indexExpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int indexExpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression indexExp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayLocation(arrExp, indexExp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("location",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // location ::= expLiteral DOT ID 
            {
              Location RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VariableLocation(fNameleft, e, fName); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("location",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // location ::= ID 
            {
              Location RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VariableLocation(nameleft, name); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("location",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // call ::= virtualCall 
            {
              Call RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VirtualCall vc = (VirtualCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // call ::= staticCall 
            {
              Call RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StaticCall sc = (StaticCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = sc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expLiteral ::= location 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Location l = (Location)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expLiteral",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expLiteral ::= call 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Call c = (Call)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expLiteral",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expLiteral ::= THIS 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new This(tleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expLiteral",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expLiteral ::= NEW CLASS_ID LP RP 
            {
              Expression RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new NewClass( nameleft, name ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expLiteral",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expLiteral ::= NEW type LB exp RB 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NewArray(t, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expLiteral",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expLiteral ::= expLiteral DOT LENGTH 
            {
              Expression RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression el = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Length(el); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expLiteral",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expLiteral ::= literal 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expLiteral",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expLiteral ::= LP exp RP 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ExpressionBlock(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expLiteral",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // unTerm ::= expLiteral 
            {
              Expression RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression el = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = el; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unTerm",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // unTerm ::= LNEG unTerm 
            {
              Expression RESULT =null;
		int utleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int utright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression ut = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicalUnaryOp( UnaryOps.LNEG, ut ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unTerm",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // unTerm ::= MINUS unTerm 
            {
              Expression RESULT =null;
		int utleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int utright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression ut = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MathUnaryOp( UnaryOps.UMINUS, ut ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unTerm",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // termOp ::= MOD 
            {
              BinaryOps RESULT =null;
		 RESULT = BinaryOps.MOD; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termOp",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // termOp ::= DIVIDE 
            {
              BinaryOps RESULT =null;
		 RESULT = BinaryOps.DIVIDE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termOp",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // termOp ::= MULTIPLY 
            {
              BinaryOps RESULT =null;
		 RESULT = BinaryOps.MULTIPLY; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termOp",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // arithTerm ::= unTerm 
            {
              Expression RESULT =null;
		int utleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int utright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression ut = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ut; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithTerm",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // arithTerm ::= arithTerm termOp unTerm 
            {
              Expression RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression at = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BinaryOps op = (BinaryOps)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int utleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int utright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression ut = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MathBinaryOp(at, op, ut); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithTerm",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arithExp ::= arithTerm 
            {
              Expression RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression at = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = at; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithExp",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // arithExp ::= arithExp MINUS arithTerm 
            {
              Expression RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression ae = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression at = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MathBinaryOp(ae, BinaryOps.MINUS, at); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithExp",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arithExp ::= arithExp PLUS arithTerm 
            {
              Expression RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression ae = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression at = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MathBinaryOp(ae, BinaryOps.PLUS, at); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithExp",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // relBinOp ::= GTE 
            {
              BinaryOps RESULT =null;
		 RESULT = BinaryOps.GTE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relBinOp",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // relBinOp ::= GT 
            {
              BinaryOps RESULT =null;
		 RESULT = BinaryOps.GT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relBinOp",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // relBinOp ::= LTE 
            {
              BinaryOps RESULT =null;
		 RESULT = BinaryOps.LTE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relBinOp",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // relBinOp ::= LT 
            {
              BinaryOps RESULT =null;
		 RESULT = BinaryOps.LT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relBinOp",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // relExp ::= arithExp 
            {
              Expression RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression ae = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ae; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relExp",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // relExp ::= arithExp relBinOp arithExp 
            {
              Expression RESULT =null;
		int ar1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ar1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression ar1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BinaryOps op = (BinaryOps)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ar2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ar2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression ar2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicalBinaryOp(ar1, op, ar2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relExp",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // eqExp ::= relExp 
            {
              Expression RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int relright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rel = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = rel; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eqExp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // eqExp ::= eqExp NEQUAL relExp 
            {
              Expression RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression ee = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int relleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int relright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rel = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicalBinaryOp( ee, BinaryOps.NEQUAL, rel ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eqExp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // eqExp ::= eqExp EQUAL relExp 
            {
              Expression RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression ee = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int relleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int relright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rel = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicalBinaryOp( ee, BinaryOps.EQUAL, rel ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eqExp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // andExp ::= eqExp 
            {
              Expression RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression ee = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ee; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("andExp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // andExp ::= andExp LAND eqExp 
            {
              Expression RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression ae = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression ee = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicalBinaryOp( ae, BinaryOps.LAND, ee ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("andExp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= andExp 
            {
              Expression RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression ae = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ae; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= exp LOR andExp 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression ae = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicalBinaryOp( e, BinaryOps.LOR, ae ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ifStmt ::= IF LP exp RP ifStmt ELSE ifStmt 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(e,s1,s2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStmt",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ifStmt ::= IF LP exp RP ifStmt 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(e,s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStmt",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ifStmt ::= WHILE LP exp RP ifStmt 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new While(e,s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStmt",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ifStmt ::= location ASSIGN exp SEMI 
            {
              Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Location l = (Location)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Assignment(l, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStmt",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ifStmt ::= type ID ASSIGN exp SEMI 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LocalVariable(t, name, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStmt",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ifStmt ::= LCBR stmtList RCBR 
            {
              Statement RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementsBlock sl = (StatementsBlock)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = sl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStmt",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ifStmt ::= CONTINUE SEMI 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Continue(cleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStmt",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ifStmt ::= BREAK SEMI 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Break(bleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStmt",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ifStmt ::= call SEMI 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Call c = (Call)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CallStatement(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStmt",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ifStmt ::= RETURN SEMI 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Return(rleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStmt",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ifStmt ::= RETURN exp SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Return(eleft, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStmt",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= type ID SEMI 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LocalVariable(t, name); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= ifStmt 
            {
              Statement RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement is = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = is; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmtList ::= 
            {
              StatementsBlock RESULT =null;
		 RESULT = new StatementsBlock(parser.getLine(),new LinkedList<Statement>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmtList ::= stmtList stmt 
            {
              StatementsBlock RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementsBlock sl = (StatementsBlock)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sl.getStatements().add(st); RESULT = sl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // formal ::= type ID 
            {
              Formal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Formal( t, name ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // formalList ::= 
            {
              List<Formal> RESULT =null;
		 RESULT = new LinkedList<Formal>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalList",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // formalList ::= formalList COMMA formal 
            {
              List<Formal> RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Formal> fl = (List<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 fl.add(f); RESULT = fl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalList",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formalList ::= formal 
            {
              List<Formal> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<Formal> fl = new LinkedList<>();
	   fl.add(f); RESULT = fl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalList",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // method ::= VOID ID LP formalList RP LCBR stmtList RCBR 
            {
              Method RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Formal> fl = (List<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementsBlock st = (StatementsBlock)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VirtualMethod(new ICVoid(nameleft), name, fl, st.getStatements()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // method ::= STATIC VOID ID LP formalList RP LCBR stmtList RCBR 
            {
              Method RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Formal> fl = (List<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementsBlock st = (StatementsBlock)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StaticMethod(new ICVoid(nameleft), name, fl, st.getStatements()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // method ::= type ID LP formalList RP LCBR stmtList RCBR 
            {
              Method RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Formal> fl = (List<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementsBlock st = (StatementsBlock)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VirtualMethod(t, name, fl, st.getStatements()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // method ::= STATIC type ID LP formalList RP LCBR stmtList RCBR 
            {
              Method RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Formal> fl = (List<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementsBlock st = (StatementsBlock)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StaticMethod(t, name, fl, st.getStatements()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // idList ::= idList COMMA ID 
            {
              List<String> RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<String> il = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 il.add(name); RESULT = il; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // idList ::= ID 
            {
              List<String> RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<String> il =new LinkedList<>();
		il.add(name);
		RESULT = il; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fieldList ::= type idList SEMI 
            {
              List<Field> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<String> il = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 List<Field> fl = new LinkedList<>();
		for ( String id : il )
			fl.add(new Field(t, id) );
		RESULT = fl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldList",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // memberList ::= 
            {
              List<ASTNode> RESULT =null;
		 RESULT = new LinkedList<ASTNode>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("memberList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // memberList ::= memberList method 
            {
              List<ASTNode> RESULT =null;
		int mlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ASTNode> ml = (List<ASTNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Method m = (Method)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ml.add(m); RESULT = ml; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("memberList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // memberList ::= memberList fieldList 
            {
              List<ASTNode> RESULT =null;
		int mlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ASTNode> ml = (List<ASTNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Field> fl = (List<Field>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 for ( Field f : fl )
			ml.add(f); 
		RESULT = ml; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("memberList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // classDecl ::= CLASS CLASS_ID LCBR memberList RCBR 
            {
              ICClass RESULT =null;
		int cNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String cName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int membersleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int membersright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ASTNode> members = (List<ASTNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  List<Method> ml = new LinkedList<>();
		List<Field> fl = new LinkedList<>();
		for ( ASTNode node : members ) {
			if ( node instanceof Method )
				ml.add((Method) node);
			else if ( node instanceof Field )
				fl.add((Field) node);
			else
				throw new SyntaxError(cNameleft, "Class can only contain fields or methods");
		}
	    RESULT = new ICClass( cNameleft, cName, fl, ml ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // classDecl ::= CLASS CLASS_ID EXTENDS CLASS_ID LCBR memberList RCBR 
            {
              ICClass RESULT =null;
		int cNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String cName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int superNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int superNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String superName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int membersleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int membersright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ASTNode> members = (List<ASTNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  List<Method> ml = new LinkedList<>();
		List<Field> fl = new LinkedList<>();
		for ( ASTNode node : members ) {
			if ( node instanceof Method )
				ml.add((Method) node);
			else if ( node instanceof Field )
				fl.add((Field) node);
			else
				throw new SyntaxError(cNameleft, "Class can only contain fields or methods");
		}
	    RESULT = new ICClass( cNameleft, cName, superName, fl, ml ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // classList ::= classList classDecl 
            {
              List<ICClass> RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ICClass> cl = (List<ICClass>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ICClass c = (ICClass)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 cl.add(c); RESULT = cl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // classList ::= classDecl 
            {
              List<ICClass> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ICClass c = (ICClass)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<ICClass> cl = new LinkedList<ICClass>();
	   cl.add(c);
	   RESULT = cl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= classList 
            {
              Program RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<ICClass> cl = (List<ICClass>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program(cl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

